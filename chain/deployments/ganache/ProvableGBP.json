{
  "address": "0x66D981D6a11e0ffC9b4fd3416a469cb625e60eCC",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_publicKey",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "grantEncryptedData",
          "type": "bytes"
        }
      ],
      "name": "AuthGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "authEncryptedData",
          "type": "bytes"
        }
      ],
      "name": "AuthRequest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "requester",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "encryptedData",
          "type": "bytes"
        }
      ],
      "name": "MintRequest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "actualMintedPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "encryptedData",
          "type": "bytes"
        }
      ],
      "name": "authGranted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "serverEncryptedData",
          "type": "bytes"
        }
      ],
      "name": "authRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getExpiryTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "encryptedData",
          "type": "bytes"
        }
      ],
      "name": "mintRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oneHundredPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "name": "paymentComplete",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "publicKey",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "seignorageFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_publicKey",
          "type": "bytes"
        }
      ],
      "name": "setPublicKey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe30ca26b15062dc745d0f7cb433e378834b0ed6db7d7acc1a081b32b82118b4a",
  "receipt": {
    "to": null,
    "from": "0x28c66272A90943D824C0d4ec4FD4f641E94cC656",
    "contractAddress": "0x66D981D6a11e0ffC9b4fd3416a469cb625e60eCC",
    "transactionIndex": 0,
    "gasUsed": "3032635",
    "logsBloom": "0x
    "blockHash": "0x9a1b981ac7b6f1baa70606ef3e32717e0146c77cbba1361ec288678c255dd996",
    "transactionHash": "0xe30ca26b15062dc745d0f7cb433e378834b0ed6db7d7acc1a081b32b82118b4a",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0xe30ca26b15062dc745d0f7cb433e378834b0ed6db7d7acc1a081b32b82118b4a",
        "address": "0x66D981D6a11e0ffC9b4fd3416a469cb625e60eCC",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000028c66272a90943d824c0d4ec4fd4f641e94cc656"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x9a1b981ac7b6f1baa70606ef3e32717e0146c77cbba1361ec288678c255dd996"
      }
    ],
    "blockNumber": 1,
    "cumulativeGasUsed": "3032635",
    "status": 1,
    "byzantium": true
  },
  "args": [
    {
      "0": 105,
      "1": 53,
      "2": 100,
      "3": 111,
      "4": 79,
      "5": 70,
      "6": 69,
      "7": 89,
      "8": 43,
      "9": 43,
      "10": 112,
      "11": 67,
      "12": 57,
      "13": 114,
      "14": 110,
      "15": 70,
      "16": 122,
      "17": 113,
      "18": 87,
      "19": 108,
      "20": 50,
      "21": 81,
      "22": 112,
      "23": 66,
      "24": 115,
      "25": 72,
      "26": 82,
      "27": 66,
      "28": 105,
      "29": 80,
      "30": 108,
      "31": 74,
      "32": 105,
      "33": 82,
      "34": 65,
      "35": 88,
      "36": 53,
      "37": 106,
      "38": 117,
      "39": 84,
      "40": 81,
      "41": 109,
      "42": 48,
      "43": 61
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "e3880338dc4b0cd5e87e1f45a0301470",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"grantEncryptedData\",\"type\":\"bytes\"}],\"name\":\"AuthGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"authEncryptedData\",\"type\":\"bytes\"}],\"name\":\"AuthRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"}],\"name\":\"MintRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"actualMintedPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"}],\"name\":\"authGranted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"serverEncryptedData\",\"type\":\"bytes\"}],\"name\":\"authRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExpiryTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"}],\"name\":\"mintRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oneHundredPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"paymentComplete\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicKey\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seignorageFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"setPublicKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"authGranted(bytes32,bytes)\":{\"params\":{\"encryptedData\":\"the grant's encrypted data\",\"requestId\":\"the original mint request id\"}},\"authRequest(bytes32,bytes)\":{\"params\":{\"requestId\":\"the original mint request id\",\"serverEncryptedData\":\"the current auth. request's encrypted data\"}},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Destroys `amount` tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"mintRequest(uint256,bytes)\":{\"params\":{\"amount\":\"The amount to be minted (specified in 10^18 decimals)\",\"encryptedData\":\"The encrypted payload of the request\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"paymentComplete(bytes32)\":{\"params\":{\"requestId\":\"the original mint request id\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"authGranted(bytes32,bytes)\":{\"notice\":\"Triggered by the original requester, emits an AuthGranted event for the server. Pausable.\"},\"authRequest(bytes32,bytes)\":{\"notice\":\"Triggered by the owner, emits an AuthRequest event for the original requester. Pausable.\"},\"mint(address,uint256)\":{\"notice\":\"Not implemented, cannot mint directly.\"},\"mintRequest(uint256,bytes)\":{\"notice\":\"Creates an internal mint Commitment and emits a MintRequest event. Pausable.\"},\"paymentComplete(bytes32)\":{\"notice\":\"Triggered by the owner, when the fiat funds have cleared. Does the mint, minus seignorage. Pausable.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ProvableGBP.sol\":\"ProvableGBP\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/ProvableGBP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ncontract ProvableGBP is ERC20, ERC20Burnable, Pausable, Ownable {\\n\\n    using SafeMath for uint256;\\n\\n    // --- Constants ---\\n    // Requests are considered expired after 2h\\n    uint256 public constant getExpiryTime = 2 hours;\\n    // % of the trx we keep in bips (10 = 0.1%)\\n    uint256 public constant seignorageFee = 10;\\n    // 100% in bips\\n    uint256 public constant oneHundredPercent = 10000;\\n    // the actual amount we are going to mint\\n    uint256 public constant actualMintedPercentage = oneHundredPercent - seignorageFee;\\n\\n    // the public key of the server-side account\\n    bytes public publicKey = \\\"\\\";\\n\\n    struct Commitment {\\n        bytes31 paramsHash;\\n        address requester;\\n        uint256 expiration;\\n        uint256 amount;\\n    }\\n\\n    // map of mint commitments\\n    mapping(bytes32 => Commitment) private s_mintCommitments;\\n\\n\\n    constructor(bytes memory _publicKey) ERC20(\\\"Provable GBP\\\", \\\"PGBP\\\") {\\n        publicKey = _publicKey;\\n    }\\n\\n    event MintRequest(\\n        address indexed requester,\\n        bytes32 indexed requestId,\\n        uint256 amount,\\n        uint256 expiration,\\n        bytes encryptedData\\n    );\\n\\n    event AuthRequest(\\n        address indexed requester,\\n        bytes32 indexed requestId,\\n        bytes authEncryptedData\\n    );\\n\\n    event AuthGranted(\\n        address indexed requester,\\n        bytes32 indexed requestId,\\n        bytes grantEncryptedData\\n    );\\n\\n    function pause() public onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyOwner {\\n        _unpause();\\n    }\\n\\n    function setPublicKey(bytes memory _publicKey) public onlyOwner {\\n        publicKey = _publicKey;\\n    }\\n\\n    /**\\n     * @notice Not implemented, cannot mint directly.\\n     */\\n    function mint(address, uint256) view public onlyOwner {\\n        // nameless function params mute \\\"unused param\\\" compiler warnings\\n        revert(\\\"You cannot mint directly\\\");\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 amount)\\n    internal\\n    whenNotPaused\\n    override\\n    {\\n        super._beforeTokenTransfer(from, to, amount);\\n    }\\n\\n    /**\\n     * @notice Creates an internal mint Commitment and emits a MintRequest event. Pausable.\\n     * @param amount The amount to be minted (specified in 10^18 decimals)\\n     * @param encryptedData The encrypted payload of the request\\n     */\\n    function mintRequest(uint256 amount, bytes calldata encryptedData)\\n    public\\n    whenNotPaused {\\n\\n        // TODO: add checks here, e.g. duplicate request, too many in the queue,...\\n        (bytes32 requestId, uint256 expiration) = _processMintRequest(\\n            msg.sender,\\n            amount,\\n            encryptedData\\n        );\\n        emit MintRequest(msg.sender, requestId, amount, expiration, encryptedData);\\n    }\\n\\n    /**\\n     * @notice Triggered by the owner, emits an AuthRequest event for the original requester. Pausable.\\n     * @param requestId the original mint request id\\n     * @param serverEncryptedData the current auth. request's encrypted data\\n     */\\n    function authRequest(\\n        bytes32 requestId,\\n        bytes calldata serverEncryptedData\\n    )\\n    public\\n    onlyOwner\\n    whenNotPaused\\n    validateRequestId(requestId)\\n    validateNotExpired(requestId) {\\n\\n        emit AuthRequest(s_mintCommitments[requestId].requester, requestId, serverEncryptedData);\\n    }\\n\\n\\n    /**\\n    * @notice Triggered by the original requester, emits an AuthGranted event for the server. Pausable.\\n     * @param requestId the original mint request id\\n     * @param encryptedData the grant's encrypted data\\n     */\\n    function authGranted(bytes32 requestId, bytes calldata encryptedData)\\n    public\\n    whenNotPaused\\n    validateRequestId(requestId)\\n    validateSameRequester(requestId, msg.sender) {\\n\\n        // TODO: does it make sense to check for expiry? or not since this THE final step?\\n\\n        emit AuthGranted(msg.sender, requestId, encryptedData);\\n    }\\n\\n    /**\\n     * @notice Triggered by the owner, when the fiat funds have cleared. Does the mint, minus seignorage. Pausable.\\n     * @param requestId the original mint request id\\n     */\\n    function paymentComplete(bytes32 requestId)\\n    public\\n    onlyOwner\\n    whenNotPaused\\n    validateRequestId(requestId) {\\n\\n        // TODO: maybe add a lifecycle status?\\n\\n        // get values\\n        uint256 amount = s_mintCommitments[requestId].amount;\\n        address receiver = s_mintCommitments[requestId].requester;\\n\\n        // delete commitment\\n        delete s_mintCommitments[requestId];\\n\\n        // do the mint\\n        _mint(receiver, amount.mul(actualMintedPercentage).div(oneHundredPercent));\\n    }\\n\\n    function _processMintRequest(address sender, uint256 amount, bytes calldata encryptedData)\\n    internal\\n    returns (bytes32 requestId, uint256 expiration) {\\n        requestId = keccak256(abi.encodePacked(sender, amount, encryptedData));\\n        require(s_mintCommitments[requestId].paramsHash == 0, \\\"Request appears to be a duplicate\\\");\\n        // solhint-disable-next-line not-rely-on-time\\n        expiration = block.timestamp.add(getExpiryTime);\\n        bytes31 paramsHash = _buildParamsHash(amount, encryptedData, expiration);\\n        s_mintCommitments[requestId] = Commitment(paramsHash, sender, expiration, amount);\\n        return (requestId, expiration);\\n    }\\n\\n    /**\\n     * @notice Build the bytes31 hash from the amount, encryptedData and expiration.\\n     * @param amount The amount to be minted (specified in 10^18 decimals)\\n     * @param encryptedData The encrypted payload of the request\\n     * @param expiration The expiration before the commitment becomes eligible for cleanup\\n     * @return hash bytes31\\n     */\\n    function _buildParamsHash(\\n        uint256 amount,\\n        bytes calldata encryptedData,\\n        uint256 expiration\\n    ) internal pure returns (bytes31) {\\n        return bytes31(keccak256(abi.encodePacked(amount, encryptedData, expiration)));\\n    }\\n\\n    /**\\n     * @dev Reverts if request ID does not exist\\n     * @param requestId The given request ID to check in stored `commitments`\\n     */\\n    modifier validateRequestId(bytes32 requestId) {\\n        require(s_mintCommitments[requestId].paramsHash != 0, \\\"Must have a valid requestId\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the commitment identified by the request ID has an expiry in the past\\n     * @param requestId The given request ID to check in stored `commitments`\\n     */\\n    modifier validateNotExpired(bytes32 requestId) {\\n        // solhint-disable-next-line not-rely-on-time\\n        require(s_mintCommitments[requestId].expiration >= block.timestamp, \\\"Request is expired\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the commitment has a recorded address different to the requester\\n     * @param requester The account making the request\\n     */\\n    modifier validateSameRequester(bytes32 requestId, address requester) {\\n        require(s_mintCommitments[requestId].requester == requester, \\\"Requester does not match\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x95e430e310faaf412cb74b2b3d550a99f3a4d64a562ce96f121740ae9690084f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052604051806020016040528060008152506006908162000024919062000486565b503480156200003257600080fd5b5060405162003c6c38038062003c6c8339818101604052810190620000589190620006d1565b6040518060400160405280600c81526020017f50726f7661626c652047425000000000000000000000000000000000000000008152506040518060400160405280600481526020017f50474250000000000000000000000000000000000000000000000000000000008152508160039081620000d5919062000787565b508060049081620000e7919062000787565b5050506000600560006101000a81548160ff02191690831515021790555062000125620001196200013e60201b60201c565b6200014660201b60201c565b806006908162000136919062000879565b505062000960565b600033905090565b6000600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200028e57607f821691505b602082108103620002a457620002a362000246565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200030e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620002cf565b6200031a8683620002cf565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600062000367620003616200035b8462000332565b6200033c565b62000332565b9050919050565b6000819050919050565b620003838362000346565b6200039b62000392826200036e565b848454620002dc565b825550505050565b600090565b620003b2620003a3565b620003bf81848462000378565b505050565b5b81811015620003e757620003db600082620003a8565b600181019050620003c5565b5050565b601f82111562000436576200040081620002aa565b6200040b84620002bf565b810160208510156200041b578190505b620004336200042a85620002bf565b830182620003c4565b50505b505050565b600082821c905092915050565b60006200045b600019846008026200043b565b1980831691505092915050565b600062000476838362000448565b9150826002028217905092915050565b62000491826200020c565b67ffffffffffffffff811115620004ad57620004ac62000217565b5b620004b9825462000275565b620004c6828285620003eb565b600060209050601f831160018114620004fe5760008415620004e9578287015190505b620004f5858262000468565b86555062000565565b601f1984166200050e86620002aa565b60005b82811015620005385784890151825560018201915060208501945060208101905062000511565b8683101562000558578489015162000554601f89168262000448565b8355505b6001600288020188555050505b505050505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b620005a7826200058b565b810181811067ffffffffffffffff82111715620005c957620005c862000217565b5b80604052505050565b6000620005de6200056d565b9050620005ec82826200059c565b919050565b600067ffffffffffffffff8211156200060f576200060e62000217565b5b6200061a826200058b565b9050602081019050919050565b60005b83811015620006475780820151818401526020810190506200062a565b60008484015250505050565b60006200066a6200066484620005f1565b620005d2565b90508281526020810184848401111562000689576200068862000586565b5b6200069684828562000627565b509392505050565b600082601f830112620006b657620006b562000581565b5b8151620006c884826020860162000653565b91505092915050565b600060208284031215620006ea57620006e962000577565b5b600082015167ffffffffffffffff8111156200070b576200070a6200057c565b5b62000719848285016200069e565b91505092915050565b60008190508160005260206000209050919050565b601f82111562000782576200074c8162000722565b6200075784620002bf565b8101602085101562000767578190505b6200077f6200077685620002bf565b830182620003c4565b50505b505050565b62000792826200020c565b67ffffffffffffffff811115620007ae57620007ad62000217565b5b620007ba825462000275565b620007c782828562000737565b600060209050601f831160018114620007ff5760008415620007ea578287015190505b620007f6858262000468565b86555062000866565b601f1984166200080f8662000722565b60005b82811015620008395784890151825560018201915060208501945060208101905062000812565b8683101562000859578489015162000855601f89168262000448565b8355505b6001600288020188555050505b505050505050565b600081519050919050565b62000884826200086e565b67ffffffffffffffff811115620008a0576200089f62000217565b5b620008ac825462000275565b620008b9828285620003eb565b600060209050601f831160018114620008f15760008415620008dc578287015190505b620008e8858262000468565b86555062000958565b601f1984166200090186620002aa565b60005b828110156200092b5784890151825560018201915060208501945060208101905062000904565b868310156200094b578489015162000947601f89168262000448565b8355505b6001600288020188555050505b505050505050565b6132fc80620009706000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c806363ffab3111610104578063a457c2d7116100a2578063ac5b756d11610071578063ac5b756d1461050f578063cdc1f6d41461052b578063dd62ed3e14610547578063f2fde38b14610577576101da565b8063a457c2d714610477578063a4629533146104a7578063a9059cbb146104c3578063a91d58b4146104f3576101da565b806379cc6790116100de57806379cc6790146104155780638456cb59146104315780638da5cb5b1461043b57806395d89b4114610459576101da565b806363ffab31146103bd57806370a08231146103db578063715018a61461040b576101da565b8063313ce5671161017c5780633f4ba83a1161014b5780633f4ba83a1461035d57806340c10f191461036757806342966c68146103835780635c975abb1461039f576101da565b8063313ce567146102d357806334913f28146102f1578063395093511461030f5780633addb12c1461033f576101da565b806318160ddd116101b857806318160ddd1461024b57806321a7e7e91461026957806323b872dd1461028557806325cb5bc0146102b5576101da565b806306fdde03146101df578063095ea7b3146101fd5780631285cc2a1461022d575b600080fd5b6101e7610593565b6040516101f49190611d5f565b60405180910390f35b61021760048036038101906102129190611e29565b610625565b6040516102249190611e84565b60405180910390f35b610235610648565b6040516102429190611eae565b60405180910390f35b61025361064d565b6040516102609190611eae565b60405180910390f35b610283600480360381019061027e9190611f64565b610657565b005b61029f600480360381019061029a9190611fc4565b6107cc565b6040516102ac9190611e84565b60405180910390f35b6102bd6107fb565b6040516102ca9190611eae565b60405180910390f35b6102db610801565b6040516102e89190612033565b60405180910390f35b6102f961080a565b6040516103069190611eae565b60405180910390f35b61032960048036038101906103249190611e29565b610810565b6040516103369190611e84565b60405180910390f35b610347610847565b6040516103549190611eae565b60405180910390f35b610365610859565b005b610381600480360381019061037c9190611e29565b61086b565b005b61039d6004803603810190610398919061204e565b6108ae565b005b6103a76108c2565b6040516103b49190611e84565b60405180910390f35b6103c56108d9565b6040516103d291906120d0565b60405180910390f35b6103f560048036038101906103f091906120f2565b610967565b6040516104029190611eae565b60405180910390f35b6104136109af565b005b61042f600480360381019061042a9190611e29565b6109c3565b005b6104396109e3565b005b6104436109f5565b604051610450919061212e565b60405180910390f35b610461610a1f565b60405161046e9190611d5f565b60405180910390f35b610491600480360381019061048c9190611e29565b610ab1565b60405161049e9190611e84565b60405180910390f35b6104c160048036038101906104bc9190611f64565b610b28565b005b6104dd60048036038101906104d89190611e29565b610c8e565b6040516104ea9190611e84565b60405180910390f35b61050d60048036038101906105089190612279565b610cb1565b005b610529600480360381019061052491906122c2565b610ccc565b005b610545600480360381019061054091906122ef565b610e63565b005b610561600480360381019061055c919061234f565b610eda565b60405161056e9190611eae565b60405180910390f35b610591600480360381019061058c91906120f2565b610f61565b005b6060600380546105a2906123be565b80601f01602080910402602001604051908101604052809291908181526020018280546105ce906123be565b801561061b5780601f106105f05761010080835404028352916020019161061b565b820191906000526020600020905b8154815290600101906020018083116105fe57829003601f168201915b5050505050905090565b600080610630610fe4565b905061063d818585610fec565b600191505092915050565b600a81565b6000600254905090565b61065f6111b5565b82600060081b6007600083815260200190815260200160002060000160009054906101000a900460081b60ff1916036106cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c49061243b565b60405180910390fd5b83338073ffffffffffffffffffffffffffffffffffffffff166007600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610773576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076a906124a7565b60405180910390fd5b853373ffffffffffffffffffffffffffffffffffffffff167fa3cd7d021dc9794ae8a4520e68440669e45a8758c6feac5a46db4c6953d35d2587876040516107bc9291906124f4565b60405180910390a3505050505050565b6000806107d7610fe4565b90506107e48582856111ff565b6107ef85858561128b565b60019150509392505050565b611c2081565b60006012905090565b61271081565b60008061081b610fe4565b905061083c81858561082d8589610eda565b6108379190612547565b610fec565b600191505092915050565b600a612710610856919061257b565b81565b610861611501565b61086961157f565b565b610873611501565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a5906125fb565b60405180910390fd5b6108bf6108b9610fe4565b826115e2565b50565b6000600560009054906101000a900460ff16905090565b600680546108e6906123be565b80601f0160208091040260200160405190810160405280929190818152602001828054610912906123be565b801561095f5780601f106109345761010080835404028352916020019161095f565b820191906000526020600020905b81548152906001019060200180831161094257829003601f168201915b505050505081565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6109b7611501565b6109c160006117af565b565b6109d5826109cf610fe4565b836111ff565b6109df82826115e2565b5050565b6109eb611501565b6109f3611875565b565b6000600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060048054610a2e906123be565b80601f0160208091040260200160405190810160405280929190818152602001828054610a5a906123be565b8015610aa75780601f10610a7c57610100808354040283529160200191610aa7565b820191906000526020600020905b815481529060010190602001808311610a8a57829003601f168201915b5050505050905090565b600080610abc610fe4565b90506000610aca8286610eda565b905083811015610b0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b069061268d565b60405180910390fd5b610b1c8286868403610fec565b60019250505092915050565b610b30611501565b610b386111b5565b82600060081b6007600083815260200190815260200160002060000160009054906101000a900460081b60ff191603610ba6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9d9061243b565b60405180910390fd5b834260076000838152602001908152602001600020600201541015610c00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf7906126f9565b60405180910390fd5b846007600087815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f220f931a071dfcd35fda9f25680cb03785508840415a802de6e99230f889862b8686604051610c7f9291906124f4565b60405180910390a35050505050565b600080610c99610fe4565b9050610ca681858561128b565b600191505092915050565b610cb9611501565b8060069081610cc891906128c5565b5050565b610cd4611501565b610cdc6111b5565b80600060081b6007600083815260200190815260200160002060000160009054906101000a900460081b60ff191603610d4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d419061243b565b60405180910390fd5b60006007600084815260200190815260200160002060030154905060006007600085815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060076000858152602001908152602001600020600080820160006101000a8154907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600282016000905560038201600090555050610e5d81610e58612710610e4a600a612710610e3b919061257b565b876118d890919063ffffffff16565b6118ee90919063ffffffff16565b611904565b50505050565b610e6b6111b5565b600080610e7a33868686611a5a565b91509150813373ffffffffffffffffffffffffffffffffffffffff167f45fa4b26a755f4cc5780432570badb0410d1ed0c688479aa9e708761ffb82ec287848888604051610ecb9493929190612997565b60405180910390a35050505050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b610f69611501565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610fd8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fcf90612a49565b60405180910390fd5b610fe1816117af565b50565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361105b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105290612adb565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036110ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c190612b6d565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516111a89190611eae565b60405180910390a3505050565b6111bd6108c2565b156111fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111f490612bd9565b60405180910390fd5b565b600061120b8484610eda565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146112855781811015611277576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161126e90612c45565b60405180910390fd5b6112848484848403610fec565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036112fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112f190612cd7565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611369576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136090612d69565b60405180910390fd5b611374838383611c15565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156113fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113f190612dfb565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516114e89190611eae565b60405180910390a36114fb848484611c2d565b50505050565b611509610fe4565b73ffffffffffffffffffffffffffffffffffffffff166115276109f5565b73ffffffffffffffffffffffffffffffffffffffff161461157d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157490612e67565b60405180910390fd5b565b611587611c32565b6000600560006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6115cb610fe4565b6040516115d8919061212e565b60405180910390a1565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611651576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161164890612ef9565b60405180910390fd5b61165d82600083611c15565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156116e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116da90612f8b565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516117969190611eae565b60405180910390a36117aa83600084611c2d565b505050565b6000600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61187d6111b5565b6001600560006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586118c1610fe4565b6040516118ce919061212e565b60405180910390a1565b600081836118e69190612fab565b905092915050565b600081836118fc919061301c565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611973576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161196a90613099565b60405180910390fd5b61197f60008383611c15565b80600260008282546119919190612547565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611a429190611eae565b60405180910390a3611a5660008383611c2d565b5050565b60008085858585604051602001611a749493929190613152565b604051602081830303815290604052805190602001209150600060081b6007600084815260200190815260200160002060000160009054906101000a900460081b60ff191614611af9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611af0906131ff565b60405180910390fd5b611b0e611c2042611c7b90919063ffffffff16565b90506000611b1e86868685611c91565b905060405180608001604052808260ff191681526020018873ffffffffffffffffffffffffffffffffffffffff168152602001838152602001878152506007600085815260200190815260200160002060008201518160000160006101000a8154817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff021916908360081c021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301559050505094509492505050565b611c1d6111b5565b611c28838383611cca565b505050565b505050565b611c3a6108c2565b611c79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c709061326b565b60405180910390fd5b565b60008183611c899190612547565b905092915050565b600084848484604051602001611caa949392919061328b565b604051602081830303815290604052805190602001209050949350505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611d09578082015181840152602081019050611cee565b60008484015250505050565b6000601f19601f8301169050919050565b6000611d3182611ccf565b611d3b8185611cda565b9350611d4b818560208601611ceb565b611d5481611d15565b840191505092915050565b60006020820190508181036000830152611d798184611d26565b905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611dc082611d95565b9050919050565b611dd081611db5565b8114611ddb57600080fd5b50565b600081359050611ded81611dc7565b92915050565b6000819050919050565b611e0681611df3565b8114611e1157600080fd5b50565b600081359050611e2381611dfd565b92915050565b60008060408385031215611e4057611e3f611d8b565b5b6000611e4e85828601611dde565b9250506020611e5f85828601611e14565b9150509250929050565b60008115159050919050565b611e7e81611e69565b82525050565b6000602082019050611e996000830184611e75565b92915050565b611ea881611df3565b82525050565b6000602082019050611ec36000830184611e9f565b92915050565b6000819050919050565b611edc81611ec9565b8114611ee757600080fd5b50565b600081359050611ef981611ed3565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611f2457611f23611eff565b5b8235905067ffffffffffffffff811115611f4157611f40611f04565b5b602083019150836001820283011115611f5d57611f5c611f09565b5b9250929050565b600080600060408486031215611f7d57611f7c611d8b565b5b6000611f8b86828701611eea565b935050602084013567ffffffffffffffff811115611fac57611fab611d90565b5b611fb886828701611f0e565b92509250509250925092565b600080600060608486031215611fdd57611fdc611d8b565b5b6000611feb86828701611dde565b9350506020611ffc86828701611dde565b925050604061200d86828701611e14565b9150509250925092565b600060ff82169050919050565b61202d81612017565b82525050565b60006020820190506120486000830184612024565b92915050565b60006020828403121561206457612063611d8b565b5b600061207284828501611e14565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60006120a28261207b565b6120ac8185612086565b93506120bc818560208601611ceb565b6120c581611d15565b840191505092915050565b600060208201905081810360008301526120ea8184612097565b905092915050565b60006020828403121561210857612107611d8b565b5b600061211684828501611dde565b91505092915050565b61212881611db5565b82525050565b6000602082019050612143600083018461211f565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61218682611d15565b810181811067ffffffffffffffff821117156121a5576121a461214e565b5b80604052505050565b60006121b8611d81565b90506121c4828261217d565b919050565b600067ffffffffffffffff8211156121e4576121e361214e565b5b6121ed82611d15565b9050602081019050919050565b82818337600083830152505050565b600061221c612217846121c9565b6121ae565b90508281526020810184848401111561223857612237612149565b5b6122438482856121fa565b509392505050565b600082601f8301126122605761225f611eff565b5b8135612270848260208601612209565b91505092915050565b60006020828403121561228f5761228e611d8b565b5b600082013567ffffffffffffffff8111156122ad576122ac611d90565b5b6122b98482850161224b565b91505092915050565b6000602082840312156122d8576122d7611d8b565b5b60006122e684828501611eea565b91505092915050565b60008060006040848603121561230857612307611d8b565b5b600061231686828701611e14565b935050602084013567ffffffffffffffff81111561233757612336611d90565b5b61234386828701611f0e565b92509250509250925092565b6000806040838503121561236657612365611d8b565b5b600061237485828601611dde565b925050602061238585828601611dde565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806123d657607f821691505b6020821081036123e9576123e861238f565b5b50919050565b7f4d757374206861766520612076616c6964207265717565737449640000000000600082015250565b6000612425601b83611cda565b9150612430826123ef565b602082019050919050565b6000602082019050818103600083015261245481612418565b9050919050565b7f52657175657374657220646f6573206e6f74206d617463680000000000000000600082015250565b6000612491601883611cda565b915061249c8261245b565b602082019050919050565b600060208201905081810360008301526124c081612484565b9050919050565b60006124d38385612086565b93506124e08385846121fa565b6124e983611d15565b840190509392505050565b6000602082019050818103600083015261250f8184866124c7565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061255282611df3565b915061255d83611df3565b925082820190508082111561257557612574612518565b5b92915050565b600061258682611df3565b915061259183611df3565b92508282039050818111156125a9576125a8612518565b5b92915050565b7f596f752063616e6e6f74206d696e74206469726563746c790000000000000000600082015250565b60006125e5601883611cda565b91506125f0826125af565b602082019050919050565b60006020820190508181036000830152612614816125d8565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000612677602583611cda565b91506126828261261b565b604082019050919050565b600060208201905081810360008301526126a68161266a565b9050919050565b7f5265717565737420697320657870697265640000000000000000000000000000600082015250565b60006126e3601283611cda565b91506126ee826126ad565b602082019050919050565b60006020820190508181036000830152612712816126d6565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261277b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261273e565b612785868361273e565b95508019841693508086168417925050509392505050565b6000819050919050565b60006127c26127bd6127b884611df3565b61279d565b611df3565b9050919050565b6000819050919050565b6127dc836127a7565b6127f06127e8826127c9565b84845461274b565b825550505050565b600090565b6128056127f8565b6128108184846127d3565b505050565b5b81811015612834576128296000826127fd565b600181019050612816565b5050565b601f8211156128795761284a81612719565b6128538461272e565b81016020851015612862578190505b61287661286e8561272e565b830182612815565b50505b505050565b600082821c905092915050565b600061289c6000198460080261287e565b1980831691505092915050565b60006128b5838361288b565b9150826002028217905092915050565b6128ce8261207b565b67ffffffffffffffff8111156128e7576128e661214e565b5b6128f182546123be565b6128fc828285612838565b600060209050601f83116001811461292f576000841561291d578287015190505b61292785826128a9565b86555061298f565b601f19841661293d86612719565b60005b8281101561296557848901518255600182019150602085019450602081019050612940565b86831015612982578489015161297e601f89168261288b565b8355505b6001600288020188555050505b505050505050565b60006060820190506129ac6000830187611e9f565b6129b96020830186611e9f565b81810360408301526129cc8184866124c7565b905095945050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612a33602683611cda565b9150612a3e826129d7565b604082019050919050565b60006020820190508181036000830152612a6281612a26565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000612ac5602483611cda565b9150612ad082612a69565b604082019050919050565b60006020820190508181036000830152612af481612ab8565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000612b57602283611cda565b9150612b6282612afb565b604082019050919050565b60006020820190508181036000830152612b8681612b4a565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b6000612bc3601083611cda565b9150612bce82612b8d565b602082019050919050565b60006020820190508181036000830152612bf281612bb6565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000612c2f601d83611cda565b9150612c3a82612bf9565b602082019050919050565b60006020820190508181036000830152612c5e81612c22565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000612cc1602583611cda565b9150612ccc82612c65565b604082019050919050565b60006020820190508181036000830152612cf081612cb4565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000612d53602383611cda565b9150612d5e82612cf7565b604082019050919050565b60006020820190508181036000830152612d8281612d46565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000612de5602683611cda565b9150612df082612d89565b604082019050919050565b60006020820190508181036000830152612e1481612dd8565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612e51602083611cda565b9150612e5c82612e1b565b602082019050919050565b60006020820190508181036000830152612e8081612e44565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000612ee3602183611cda565b9150612eee82612e87565b604082019050919050565b60006020820190508181036000830152612f1281612ed6565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000612f75602283611cda565b9150612f8082612f19565b604082019050919050565b60006020820190508181036000830152612fa481612f68565b9050919050565b6000612fb682611df3565b9150612fc183611df3565b9250828202612fcf81611df3565b91508282048414831517612fe657612fe5612518565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061302782611df3565b915061303283611df3565b92508261304257613041612fed565b5b828204905092915050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000613083601f83611cda565b915061308e8261304d565b602082019050919050565b600060208201905081810360008301526130b281613076565b9050919050565b60008160601b9050919050565b60006130d1826130b9565b9050919050565b60006130e3826130c6565b9050919050565b6130fb6130f682611db5565b6130d8565b82525050565b6000819050919050565b61311c61311782611df3565b613101565b82525050565b600081905092915050565b60006131398385613122565b93506131468385846121fa565b82840190509392505050565b600061315e82876130ea565b60148201915061316e828661310b565b60208201915061317f82848661312d565b915081905095945050505050565b7f52657175657374206170706561727320746f2062652061206475706c6963617460008201527f6500000000000000000000000000000000000000000000000000000000000000602082015250565b60006131e9602183611cda565b91506131f48261318d565b604082019050919050565b60006020820190508181036000830152613218816131dc565b9050919050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b6000613255601483611cda565b91506132608261321f565b602082019050919050565b6000602082019050818103600083015261328481613248565b9050919050565b6000613297828761310b565b6020820191506132a882858761312d565b91506132b4828461310b565b6020820191508190509594505050505056fea26469706673582212207126450d60b0357e4501223560873a904b4004e5fee1e84467d96e2f88c4d25564736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c806363ffab3111610104578063a457c2d7116100a2578063ac5b756d11610071578063ac5b756d1461050f578063cdc1f6d41461052b578063dd62ed3e14610547578063f2fde38b14610577576101da565b8063a457c2d714610477578063a4629533146104a7578063a9059cbb146104c3578063a91d58b4146104f3576101da565b806379cc6790116100de57806379cc6790146104155780638456cb59146104315780638da5cb5b1461043b57806395d89b4114610459576101da565b806363ffab31146103bd57806370a08231146103db578063715018a61461040b576101da565b8063313ce5671161017c5780633f4ba83a1161014b5780633f4ba83a1461035d57806340c10f191461036757806342966c68146103835780635c975abb1461039f576101da565b8063313ce567146102d357806334913f28146102f1578063395093511461030f5780633addb12c1461033f576101da565b806318160ddd116101b857806318160ddd1461024b57806321a7e7e91461026957806323b872dd1461028557806325cb5bc0146102b5576101da565b806306fdde03146101df578063095ea7b3146101fd5780631285cc2a1461022d575b600080fd5b6101e7610593565b6040516101f49190611d5f565b60405180910390f35b61021760048036038101906102129190611e29565b610625565b6040516102249190611e84565b60405180910390f35b610235610648565b6040516102429190611eae565b60405180910390f35b61025361064d565b6040516102609190611eae565b60405180910390f35b610283600480360381019061027e9190611f64565b610657565b005b61029f600480360381019061029a9190611fc4565b6107cc565b6040516102ac9190611e84565b60405180910390f35b6102bd6107fb565b6040516102ca9190611eae565b60405180910390f35b6102db610801565b6040516102e89190612033565b60405180910390f35b6102f961080a565b6040516103069190611eae565b60405180910390f35b61032960048036038101906103249190611e29565b610810565b6040516103369190611e84565b60405180910390f35b610347610847565b6040516103549190611eae565b60405180910390f35b610365610859565b005b610381600480360381019061037c9190611e29565b61086b565b005b61039d6004803603810190610398919061204e565b6108ae565b005b6103a76108c2565b6040516103b49190611e84565b60405180910390f35b6103c56108d9565b6040516103d291906120d0565b60405180910390f35b6103f560048036038101906103f091906120f2565b610967565b6040516104029190611eae565b60405180910390f35b6104136109af565b005b61042f600480360381019061042a9190611e29565b6109c3565b005b6104396109e3565b005b6104436109f5565b604051610450919061212e565b60405180910390f35b610461610a1f565b60405161046e9190611d5f565b60405180910390f35b610491600480360381019061048c9190611e29565b610ab1565b60405161049e9190611e84565b60405180910390f35b6104c160048036038101906104bc9190611f64565b610b28565b005b6104dd60048036038101906104d89190611e29565b610c8e565b6040516104ea9190611e84565b60405180910390f35b61050d60048036038101906105089190612279565b610cb1565b005b610529600480360381019061052491906122c2565b610ccc565b005b610545600480360381019061054091906122ef565b610e63565b005b610561600480360381019061055c919061234f565b610eda565b60405161056e9190611eae565b60405180910390f35b610591600480360381019061058c91906120f2565b610f61565b005b6060600380546105a2906123be565b80601f01602080910402602001604051908101604052809291908181526020018280546105ce906123be565b801561061b5780601f106105f05761010080835404028352916020019161061b565b820191906000526020600020905b8154815290600101906020018083116105fe57829003601f168201915b5050505050905090565b600080610630610fe4565b905061063d818585610fec565b600191505092915050565b600a81565b6000600254905090565b61065f6111b5565b82600060081b6007600083815260200190815260200160002060000160009054906101000a900460081b60ff1916036106cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c49061243b565b60405180910390fd5b83338073ffffffffffffffffffffffffffffffffffffffff166007600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610773576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076a906124a7565b60405180910390fd5b853373ffffffffffffffffffffffffffffffffffffffff167fa3cd7d021dc9794ae8a4520e68440669e45a8758c6feac5a46db4c6953d35d2587876040516107bc9291906124f4565b60405180910390a3505050505050565b6000806107d7610fe4565b90506107e48582856111ff565b6107ef85858561128b565b60019150509392505050565b611c2081565b60006012905090565b61271081565b60008061081b610fe4565b905061083c81858561082d8589610eda565b6108379190612547565b610fec565b600191505092915050565b600a612710610856919061257b565b81565b610861611501565b61086961157f565b565b610873611501565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a5906125fb565b60405180910390fd5b6108bf6108b9610fe4565b826115e2565b50565b6000600560009054906101000a900460ff16905090565b600680546108e6906123be565b80601f0160208091040260200160405190810160405280929190818152602001828054610912906123be565b801561095f5780601f106109345761010080835404028352916020019161095f565b820191906000526020600020905b81548152906001019060200180831161094257829003601f168201915b505050505081565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6109b7611501565b6109c160006117af565b565b6109d5826109cf610fe4565b836111ff565b6109df82826115e2565b5050565b6109eb611501565b6109f3611875565b565b6000600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060048054610a2e906123be565b80601f0160208091040260200160405190810160405280929190818152602001828054610a5a906123be565b8015610aa75780601f10610a7c57610100808354040283529160200191610aa7565b820191906000526020600020905b815481529060010190602001808311610a8a57829003601f168201915b5050505050905090565b600080610abc610fe4565b90506000610aca8286610eda565b905083811015610b0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b069061268d565b60405180910390fd5b610b1c8286868403610fec565b60019250505092915050565b610b30611501565b610b386111b5565b82600060081b6007600083815260200190815260200160002060000160009054906101000a900460081b60ff191603610ba6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9d9061243b565b60405180910390fd5b834260076000838152602001908152602001600020600201541015610c00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf7906126f9565b60405180910390fd5b846007600087815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f220f931a071dfcd35fda9f25680cb03785508840415a802de6e99230f889862b8686604051610c7f9291906124f4565b60405180910390a35050505050565b600080610c99610fe4565b9050610ca681858561128b565b600191505092915050565b610cb9611501565b8060069081610cc891906128c5565b5050565b610cd4611501565b610cdc6111b5565b80600060081b6007600083815260200190815260200160002060000160009054906101000a900460081b60ff191603610d4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d419061243b565b60405180910390fd5b60006007600084815260200190815260200160002060030154905060006007600085815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060076000858152602001908152602001600020600080820160006101000a8154907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600282016000905560038201600090555050610e5d81610e58612710610e4a600a612710610e3b919061257b565b876118d890919063ffffffff16565b6118ee90919063ffffffff16565b611904565b50505050565b610e6b6111b5565b600080610e7a33868686611a5a565b91509150813373ffffffffffffffffffffffffffffffffffffffff167f45fa4b26a755f4cc5780432570badb0410d1ed0c688479aa9e708761ffb82ec287848888604051610ecb9493929190612997565b60405180910390a35050505050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b610f69611501565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610fd8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fcf90612a49565b60405180910390fd5b610fe1816117af565b50565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361105b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105290612adb565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036110ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c190612b6d565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516111a89190611eae565b60405180910390a3505050565b6111bd6108c2565b156111fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111f490612bd9565b60405180910390fd5b565b600061120b8484610eda565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146112855781811015611277576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161126e90612c45565b60405180910390fd5b6112848484848403610fec565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036112fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112f190612cd7565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611369576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136090612d69565b60405180910390fd5b611374838383611c15565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156113fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113f190612dfb565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516114e89190611eae565b60405180910390a36114fb848484611c2d565b50505050565b611509610fe4565b73ffffffffffffffffffffffffffffffffffffffff166115276109f5565b73ffffffffffffffffffffffffffffffffffffffff161461157d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157490612e67565b60405180910390fd5b565b611587611c32565b6000600560006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6115cb610fe4565b6040516115d8919061212e565b60405180910390a1565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611651576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161164890612ef9565b60405180910390fd5b61165d82600083611c15565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156116e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116da90612f8b565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516117969190611eae565b60405180910390a36117aa83600084611c2d565b505050565b6000600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61187d6111b5565b6001600560006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586118c1610fe4565b6040516118ce919061212e565b60405180910390a1565b600081836118e69190612fab565b905092915050565b600081836118fc919061301c565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611973576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161196a90613099565b60405180910390fd5b61197f60008383611c15565b80600260008282546119919190612547565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611a429190611eae565b60405180910390a3611a5660008383611c2d565b5050565b60008085858585604051602001611a749493929190613152565b604051602081830303815290604052805190602001209150600060081b6007600084815260200190815260200160002060000160009054906101000a900460081b60ff191614611af9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611af0906131ff565b60405180910390fd5b611b0e611c2042611c7b90919063ffffffff16565b90506000611b1e86868685611c91565b905060405180608001604052808260ff191681526020018873ffffffffffffffffffffffffffffffffffffffff168152602001838152602001878152506007600085815260200190815260200160002060008201518160000160006101000a8154817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff021916908360081c021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301559050505094509492505050565b611c1d6111b5565b611c28838383611cca565b505050565b505050565b611c3a6108c2565b611c79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c709061326b565b60405180910390fd5b565b60008183611c899190612547565b905092915050565b600084848484604051602001611caa949392919061328b565b604051602081830303815290604052805190602001209050949350505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611d09578082015181840152602081019050611cee565b60008484015250505050565b6000601f19601f8301169050919050565b6000611d3182611ccf565b611d3b8185611cda565b9350611d4b818560208601611ceb565b611d5481611d15565b840191505092915050565b60006020820190508181036000830152611d798184611d26565b905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611dc082611d95565b9050919050565b611dd081611db5565b8114611ddb57600080fd5b50565b600081359050611ded81611dc7565b92915050565b6000819050919050565b611e0681611df3565b8114611e1157600080fd5b50565b600081359050611e2381611dfd565b92915050565b60008060408385031215611e4057611e3f611d8b565b5b6000611e4e85828601611dde565b9250506020611e5f85828601611e14565b9150509250929050565b60008115159050919050565b611e7e81611e69565b82525050565b6000602082019050611e996000830184611e75565b92915050565b611ea881611df3565b82525050565b6000602082019050611ec36000830184611e9f565b92915050565b6000819050919050565b611edc81611ec9565b8114611ee757600080fd5b50565b600081359050611ef981611ed3565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611f2457611f23611eff565b5b8235905067ffffffffffffffff811115611f4157611f40611f04565b5b602083019150836001820283011115611f5d57611f5c611f09565b5b9250929050565b600080600060408486031215611f7d57611f7c611d8b565b5b6000611f8b86828701611eea565b935050602084013567ffffffffffffffff811115611fac57611fab611d90565b5b611fb886828701611f0e565b92509250509250925092565b600080600060608486031215611fdd57611fdc611d8b565b5b6000611feb86828701611dde565b9350506020611ffc86828701611dde565b925050604061200d86828701611e14565b9150509250925092565b600060ff82169050919050565b61202d81612017565b82525050565b60006020820190506120486000830184612024565b92915050565b60006020828403121561206457612063611d8b565b5b600061207284828501611e14565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60006120a28261207b565b6120ac8185612086565b93506120bc818560208601611ceb565b6120c581611d15565b840191505092915050565b600060208201905081810360008301526120ea8184612097565b905092915050565b60006020828403121561210857612107611d8b565b5b600061211684828501611dde565b91505092915050565b61212881611db5565b82525050565b6000602082019050612143600083018461211f565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61218682611d15565b810181811067ffffffffffffffff821117156121a5576121a461214e565b5b80604052505050565b60006121b8611d81565b90506121c4828261217d565b919050565b600067ffffffffffffffff8211156121e4576121e361214e565b5b6121ed82611d15565b9050602081019050919050565b82818337600083830152505050565b600061221c612217846121c9565b6121ae565b90508281526020810184848401111561223857612237612149565b5b6122438482856121fa565b509392505050565b600082601f8301126122605761225f611eff565b5b8135612270848260208601612209565b91505092915050565b60006020828403121561228f5761228e611d8b565b5b600082013567ffffffffffffffff8111156122ad576122ac611d90565b5b6122b98482850161224b565b91505092915050565b6000602082840312156122d8576122d7611d8b565b5b60006122e684828501611eea565b91505092915050565b60008060006040848603121561230857612307611d8b565b5b600061231686828701611e14565b935050602084013567ffffffffffffffff81111561233757612336611d90565b5b61234386828701611f0e565b92509250509250925092565b6000806040838503121561236657612365611d8b565b5b600061237485828601611dde565b925050602061238585828601611dde565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806123d657607f821691505b6020821081036123e9576123e861238f565b5b50919050565b7f4d757374206861766520612076616c6964207265717565737449640000000000600082015250565b6000612425601b83611cda565b9150612430826123ef565b602082019050919050565b6000602082019050818103600083015261245481612418565b9050919050565b7f52657175657374657220646f6573206e6f74206d617463680000000000000000600082015250565b6000612491601883611cda565b915061249c8261245b565b602082019050919050565b600060208201905081810360008301526124c081612484565b9050919050565b60006124d38385612086565b93506124e08385846121fa565b6124e983611d15565b840190509392505050565b6000602082019050818103600083015261250f8184866124c7565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061255282611df3565b915061255d83611df3565b925082820190508082111561257557612574612518565b5b92915050565b600061258682611df3565b915061259183611df3565b92508282039050818111156125a9576125a8612518565b5b92915050565b7f596f752063616e6e6f74206d696e74206469726563746c790000000000000000600082015250565b60006125e5601883611cda565b91506125f0826125af565b602082019050919050565b60006020820190508181036000830152612614816125d8565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000612677602583611cda565b91506126828261261b565b604082019050919050565b600060208201905081810360008301526126a68161266a565b9050919050565b7f5265717565737420697320657870697265640000000000000000000000000000600082015250565b60006126e3601283611cda565b91506126ee826126ad565b602082019050919050565b60006020820190508181036000830152612712816126d6565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261277b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261273e565b612785868361273e565b95508019841693508086168417925050509392505050565b6000819050919050565b60006127c26127bd6127b884611df3565b61279d565b611df3565b9050919050565b6000819050919050565b6127dc836127a7565b6127f06127e8826127c9565b84845461274b565b825550505050565b600090565b6128056127f8565b6128108184846127d3565b505050565b5b81811015612834576128296000826127fd565b600181019050612816565b5050565b601f8211156128795761284a81612719565b6128538461272e565b81016020851015612862578190505b61287661286e8561272e565b830182612815565b50505b505050565b600082821c905092915050565b600061289c6000198460080261287e565b1980831691505092915050565b60006128b5838361288b565b9150826002028217905092915050565b6128ce8261207b565b67ffffffffffffffff8111156128e7576128e661214e565b5b6128f182546123be565b6128fc828285612838565b600060209050601f83116001811461292f576000841561291d578287015190505b61292785826128a9565b86555061298f565b601f19841661293d86612719565b60005b8281101561296557848901518255600182019150602085019450602081019050612940565b86831015612982578489015161297e601f89168261288b565b8355505b6001600288020188555050505b505050505050565b60006060820190506129ac6000830187611e9f565b6129b96020830186611e9f565b81810360408301526129cc8184866124c7565b905095945050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612a33602683611cda565b9150612a3e826129d7565b604082019050919050565b60006020820190508181036000830152612a6281612a26565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000612ac5602483611cda565b9150612ad082612a69565b604082019050919050565b60006020820190508181036000830152612af481612ab8565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000612b57602283611cda565b9150612b6282612afb565b604082019050919050565b60006020820190508181036000830152612b8681612b4a565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b6000612bc3601083611cda565b9150612bce82612b8d565b602082019050919050565b60006020820190508181036000830152612bf281612bb6565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000612c2f601d83611cda565b9150612c3a82612bf9565b602082019050919050565b60006020820190508181036000830152612c5e81612c22565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000612cc1602583611cda565b9150612ccc82612c65565b604082019050919050565b60006020820190508181036000830152612cf081612cb4565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000612d53602383611cda565b9150612d5e82612cf7565b604082019050919050565b60006020820190508181036000830152612d8281612d46565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000612de5602683611cda565b9150612df082612d89565b604082019050919050565b60006020820190508181036000830152612e1481612dd8565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612e51602083611cda565b9150612e5c82612e1b565b602082019050919050565b60006020820190508181036000830152612e8081612e44565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000612ee3602183611cda565b9150612eee82612e87565b604082019050919050565b60006020820190508181036000830152612f1281612ed6565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000612f75602283611cda565b9150612f8082612f19565b604082019050919050565b60006020820190508181036000830152612fa481612f68565b9050919050565b6000612fb682611df3565b9150612fc183611df3565b9250828202612fcf81611df3565b91508282048414831517612fe657612fe5612518565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061302782611df3565b915061303283611df3565b92508261304257613041612fed565b5b828204905092915050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000613083601f83611cda565b915061308e8261304d565b602082019050919050565b600060208201905081810360008301526130b281613076565b9050919050565b60008160601b9050919050565b60006130d1826130b9565b9050919050565b60006130e3826130c6565b9050919050565b6130fb6130f682611db5565b6130d8565b82525050565b6000819050919050565b61311c61311782611df3565b613101565b82525050565b600081905092915050565b60006131398385613122565b93506131468385846121fa565b82840190509392505050565b600061315e82876130ea565b60148201915061316e828661310b565b60208201915061317f82848661312d565b915081905095945050505050565b7f52657175657374206170706561727320746f2062652061206475706c6963617460008201527f6500000000000000000000000000000000000000000000000000000000000000602082015250565b60006131e9602183611cda565b91506131f48261318d565b604082019050919050565b60006020820190508181036000830152613218816131dc565b9050919050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b6000613255601483611cda565b91506132608261321f565b602082019050919050565b6000602082019050818103600083015261328481613248565b9050919050565b6000613297828761310b565b6020820191506132a882858761312d565b91506132b4828461310b565b6020820191508190509594505050505056fea26469706673582212207126450d60b0357e4501223560873a904b4004e5fee1e84467d96e2f88c4d25564736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "authGranted(bytes32,bytes)": {
        "params": {
          "encryptedData": "the grant's encrypted data",
          "requestId": "the original mint request id"
        }
      },
      "authRequest(bytes32,bytes)": {
        "params": {
          "requestId": "the original mint request id",
          "serverEncryptedData": "the current auth. request's encrypted data"
        }
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "burn(uint256)": {
        "details": "Destroys `amount` tokens from the caller. See {ERC20-_burn}."
      },
      "burnFrom(address,uint256)": {
        "details": "Destroys `amount` tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `amount`."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "mintRequest(uint256,bytes)": {
        "params": {
          "amount": "The amount to be minted (specified in 10^18 decimals)",
          "encryptedData": "The encrypted payload of the request"
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "paymentComplete(bytes32)": {
        "params": {
          "requestId": "the original mint request id"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "authGranted(bytes32,bytes)": {
        "notice": "Triggered by the original requester, emits an AuthGranted event for the server. Pausable."
      },
      "authRequest(bytes32,bytes)": {
        "notice": "Triggered by the owner, emits an AuthRequest event for the original requester. Pausable."
      },
      "mint(address,uint256)": {
        "notice": "Not implemented, cannot mint directly."
      },
      "mintRequest(uint256,bytes)": {
        "notice": "Creates an internal mint Commitment and emits a MintRequest event. Pausable."
      },
      "paymentComplete(bytes32)": {
        "notice": "Triggered by the owner, when the fiat funds have cleared. Does the mint, minus seignorage. Pausable."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 236,
        "contract": "contracts/ProvableGBP.sol:ProvableGBP",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 242,
        "contract": "contracts/ProvableGBP.sol:ProvableGBP",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 244,
        "contract": "contracts/ProvableGBP.sol:ProvableGBP",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 246,
        "contract": "contracts/ProvableGBP.sol:ProvableGBP",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 248,
        "contract": "contracts/ProvableGBP.sol:ProvableGBP",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 130,
        "contract": "contracts/ProvableGBP.sol:ProvableGBP",
        "label": "_paused",
        "offset": 0,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 7,
        "contract": "contracts/ProvableGBP.sol:ProvableGBP",
        "label": "_owner",
        "offset": 1,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 1323,
        "contract": "contracts/ProvableGBP.sol:ProvableGBP",
        "label": "publicKey",
        "offset": 0,
        "slot": "6",
        "type": "t_bytes_storage"
      },
      {
        "astId": 1337,
        "contract": "contracts/ProvableGBP.sol:ProvableGBP",
        "label": "s_mintCommitments",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_struct(Commitment)1332_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes31": {
        "encoding": "inplace",
        "label": "bytes31",
        "numberOfBytes": "31"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(Commitment)1332_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct ProvableGBP.Commitment)",
        "numberOfBytes": "32",
        "value": "t_struct(Commitment)1332_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Commitment)1332_storage": {
        "encoding": "inplace",
        "label": "struct ProvableGBP.Commitment",
        "members": [
          {
            "astId": 1325,
            "contract": "contracts/ProvableGBP.sol:ProvableGBP",
            "label": "paramsHash",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes31"
          },
          {
            "astId": 1327,
            "contract": "contracts/ProvableGBP.sol:ProvableGBP",
            "label": "requester",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1329,
            "contract": "contracts/ProvableGBP.sol:ProvableGBP",
            "label": "expiration",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1331,
            "contract": "contracts/ProvableGBP.sol:ProvableGBP",
            "label": "amount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}