// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contract

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ProvableGBPMetaData contains all meta data concerning the ProvableGBP contract.
var ProvableGBPMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"grantEncryptedData\",\"type\":\"bytes\"}],\"name\":\"AuthGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"authEncryptedData\",\"type\":\"bytes\"}],\"name\":\"AuthRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requester\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"}],\"name\":\"MintRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"actualMintedPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"}],\"name\":\"authGranted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"serverEncryptedData\",\"type\":\"bytes\"}],\"name\":\"authRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExpiryTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"encryptedData\",\"type\":\"bytes\"}],\"name\":\"mintRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oneHundredPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"paymentComplete\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicKey\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seignorageFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"setPublicKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x6080604052604051806020016040528060008152506006908162000024919062000486565b503480156200003257600080fd5b5060405162003c6c38038062003c6c8339818101604052810190620000589190620006d1565b6040518060400160405280600c81526020017f50726f7661626c652047425000000000000000000000000000000000000000008152506040518060400160405280600481526020017f50474250000000000000000000000000000000000000000000000000000000008152508160039081620000d5919062000787565b508060049081620000e7919062000787565b5050506000600560006101000a81548160ff02191690831515021790555062000125620001196200013e60201b60201c565b6200014660201b60201c565b806006908162000136919062000879565b505062000960565b600033905090565b6000600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200028e57607f821691505b602082108103620002a457620002a362000246565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200030e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620002cf565b6200031a8683620002cf565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600062000367620003616200035b8462000332565b6200033c565b62000332565b9050919050565b6000819050919050565b620003838362000346565b6200039b62000392826200036e565b848454620002dc565b825550505050565b600090565b620003b2620003a3565b620003bf81848462000378565b505050565b5b81811015620003e757620003db600082620003a8565b600181019050620003c5565b5050565b601f82111562000436576200040081620002aa565b6200040b84620002bf565b810160208510156200041b578190505b620004336200042a85620002bf565b830182620003c4565b50505b505050565b600082821c905092915050565b60006200045b600019846008026200043b565b1980831691505092915050565b600062000476838362000448565b9150826002028217905092915050565b62000491826200020c565b67ffffffffffffffff811115620004ad57620004ac62000217565b5b620004b9825462000275565b620004c6828285620003eb565b600060209050601f831160018114620004fe5760008415620004e9578287015190505b620004f5858262000468565b86555062000565565b601f1984166200050e86620002aa565b60005b82811015620005385784890151825560018201915060208501945060208101905062000511565b8683101562000558578489015162000554601f89168262000448565b8355505b6001600288020188555050505b505050505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b620005a7826200058b565b810181811067ffffffffffffffff82111715620005c957620005c862000217565b5b80604052505050565b6000620005de6200056d565b9050620005ec82826200059c565b919050565b600067ffffffffffffffff8211156200060f576200060e62000217565b5b6200061a826200058b565b9050602081019050919050565b60005b83811015620006475780820151818401526020810190506200062a565b60008484015250505050565b60006200066a6200066484620005f1565b620005d2565b90508281526020810184848401111562000689576200068862000586565b5b6200069684828562000627565b509392505050565b600082601f830112620006b657620006b562000581565b5b8151620006c884826020860162000653565b91505092915050565b600060208284031215620006ea57620006e962000577565b5b600082015167ffffffffffffffff8111156200070b576200070a6200057c565b5b62000719848285016200069e565b91505092915050565b60008190508160005260206000209050919050565b601f82111562000782576200074c8162000722565b6200075784620002bf565b8101602085101562000767578190505b6200077f6200077685620002bf565b830182620003c4565b50505b505050565b62000792826200020c565b67ffffffffffffffff811115620007ae57620007ad62000217565b5b620007ba825462000275565b620007c782828562000737565b600060209050601f831160018114620007ff5760008415620007ea578287015190505b620007f6858262000468565b86555062000866565b601f1984166200080f8662000722565b60005b82811015620008395784890151825560018201915060208501945060208101905062000812565b8683101562000859578489015162000855601f89168262000448565b8355505b6001600288020188555050505b505050505050565b600081519050919050565b62000884826200086e565b67ffffffffffffffff811115620008a0576200089f62000217565b5b620008ac825462000275565b620008b9828285620003eb565b600060209050601f831160018114620008f15760008415620008dc578287015190505b620008e8858262000468565b86555062000958565b601f1984166200090186620002aa565b60005b828110156200092b5784890151825560018201915060208501945060208101905062000904565b868310156200094b578489015162000947601f89168262000448565b8355505b6001600288020188555050505b505050505050565b6132fc80620009706000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c806363ffab3111610104578063a457c2d7116100a2578063ac5b756d11610071578063ac5b756d1461050f578063cdc1f6d41461052b578063dd62ed3e14610547578063f2fde38b14610577576101da565b8063a457c2d714610477578063a4629533146104a7578063a9059cbb146104c3578063a91d58b4146104f3576101da565b806379cc6790116100de57806379cc6790146104155780638456cb59146104315780638da5cb5b1461043b57806395d89b4114610459576101da565b806363ffab31146103bd57806370a08231146103db578063715018a61461040b576101da565b8063313ce5671161017c5780633f4ba83a1161014b5780633f4ba83a1461035d57806340c10f191461036757806342966c68146103835780635c975abb1461039f576101da565b8063313ce567146102d357806334913f28146102f1578063395093511461030f5780633addb12c1461033f576101da565b806318160ddd116101b857806318160ddd1461024b57806321a7e7e91461026957806323b872dd1461028557806325cb5bc0146102b5576101da565b806306fdde03146101df578063095ea7b3146101fd5780631285cc2a1461022d575b600080fd5b6101e7610593565b6040516101f49190611d5f565b60405180910390f35b61021760048036038101906102129190611e29565b610625565b6040516102249190611e84565b60405180910390f35b610235610648565b6040516102429190611eae565b60405180910390f35b61025361064d565b6040516102609190611eae565b60405180910390f35b610283600480360381019061027e9190611f64565b610657565b005b61029f600480360381019061029a9190611fc4565b6107cc565b6040516102ac9190611e84565b60405180910390f35b6102bd6107fb565b6040516102ca9190611eae565b60405180910390f35b6102db610801565b6040516102e89190612033565b60405180910390f35b6102f961080a565b6040516103069190611eae565b60405180910390f35b61032960048036038101906103249190611e29565b610810565b6040516103369190611e84565b60405180910390f35b610347610847565b6040516103549190611eae565b60405180910390f35b610365610859565b005b610381600480360381019061037c9190611e29565b61086b565b005b61039d6004803603810190610398919061204e565b6108ae565b005b6103a76108c2565b6040516103b49190611e84565b60405180910390f35b6103c56108d9565b6040516103d291906120d0565b60405180910390f35b6103f560048036038101906103f091906120f2565b610967565b6040516104029190611eae565b60405180910390f35b6104136109af565b005b61042f600480360381019061042a9190611e29565b6109c3565b005b6104396109e3565b005b6104436109f5565b604051610450919061212e565b60405180910390f35b610461610a1f565b60405161046e9190611d5f565b60405180910390f35b610491600480360381019061048c9190611e29565b610ab1565b60405161049e9190611e84565b60405180910390f35b6104c160048036038101906104bc9190611f64565b610b28565b005b6104dd60048036038101906104d89190611e29565b610c8e565b6040516104ea9190611e84565b60405180910390f35b61050d60048036038101906105089190612279565b610cb1565b005b610529600480360381019061052491906122c2565b610ccc565b005b610545600480360381019061054091906122ef565b610e63565b005b610561600480360381019061055c919061234f565b610eda565b60405161056e9190611eae565b60405180910390f35b610591600480360381019061058c91906120f2565b610f61565b005b6060600380546105a2906123be565b80601f01602080910402602001604051908101604052809291908181526020018280546105ce906123be565b801561061b5780601f106105f05761010080835404028352916020019161061b565b820191906000526020600020905b8154815290600101906020018083116105fe57829003601f168201915b5050505050905090565b600080610630610fe4565b905061063d818585610fec565b600191505092915050565b600a81565b6000600254905090565b61065f6111b5565b82600060081b6007600083815260200190815260200160002060000160009054906101000a900460081b60ff1916036106cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106c49061243b565b60405180910390fd5b83338073ffffffffffffffffffffffffffffffffffffffff166007600084815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610773576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076a906124a7565b60405180910390fd5b853373ffffffffffffffffffffffffffffffffffffffff167fa3cd7d021dc9794ae8a4520e68440669e45a8758c6feac5a46db4c6953d35d2587876040516107bc9291906124f4565b60405180910390a3505050505050565b6000806107d7610fe4565b90506107e48582856111ff565b6107ef85858561128b565b60019150509392505050565b611c2081565b60006012905090565b61271081565b60008061081b610fe4565b905061083c81858561082d8589610eda565b6108379190612547565b610fec565b600191505092915050565b600a612710610856919061257b565b81565b610861611501565b61086961157f565b565b610873611501565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a5906125fb565b60405180910390fd5b6108bf6108b9610fe4565b826115e2565b50565b6000600560009054906101000a900460ff16905090565b600680546108e6906123be565b80601f0160208091040260200160405190810160405280929190818152602001828054610912906123be565b801561095f5780601f106109345761010080835404028352916020019161095f565b820191906000526020600020905b81548152906001019060200180831161094257829003601f168201915b505050505081565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6109b7611501565b6109c160006117af565b565b6109d5826109cf610fe4565b836111ff565b6109df82826115e2565b5050565b6109eb611501565b6109f3611875565b565b6000600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060048054610a2e906123be565b80601f0160208091040260200160405190810160405280929190818152602001828054610a5a906123be565b8015610aa75780601f10610a7c57610100808354040283529160200191610aa7565b820191906000526020600020905b815481529060010190602001808311610a8a57829003601f168201915b5050505050905090565b600080610abc610fe4565b90506000610aca8286610eda565b905083811015610b0f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b069061268d565b60405180910390fd5b610b1c8286868403610fec565b60019250505092915050565b610b30611501565b610b386111b5565b82600060081b6007600083815260200190815260200160002060000160009054906101000a900460081b60ff191603610ba6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9d9061243b565b60405180910390fd5b834260076000838152602001908152602001600020600201541015610c00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf7906126f9565b60405180910390fd5b846007600087815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f220f931a071dfcd35fda9f25680cb03785508840415a802de6e99230f889862b8686604051610c7f9291906124f4565b60405180910390a35050505050565b600080610c99610fe4565b9050610ca681858561128b565b600191505092915050565b610cb9611501565b8060069081610cc891906128c5565b5050565b610cd4611501565b610cdc6111b5565b80600060081b6007600083815260200190815260200160002060000160009054906101000a900460081b60ff191603610d4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d419061243b565b60405180910390fd5b60006007600084815260200190815260200160002060030154905060006007600085815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060076000858152602001908152602001600020600080820160006101000a8154907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600282016000905560038201600090555050610e5d81610e58612710610e4a600a612710610e3b919061257b565b876118d890919063ffffffff16565b6118ee90919063ffffffff16565b611904565b50505050565b610e6b6111b5565b600080610e7a33868686611a5a565b91509150813373ffffffffffffffffffffffffffffffffffffffff167f45fa4b26a755f4cc5780432570badb0410d1ed0c688479aa9e708761ffb82ec287848888604051610ecb9493929190612997565b60405180910390a35050505050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b610f69611501565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610fd8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fcf90612a49565b60405180910390fd5b610fe1816117af565b50565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361105b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105290612adb565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036110ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110c190612b6d565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516111a89190611eae565b60405180910390a3505050565b6111bd6108c2565b156111fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111f490612bd9565b60405180910390fd5b565b600061120b8484610eda565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146112855781811015611277576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161126e90612c45565b60405180910390fd5b6112848484848403610fec565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036112fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112f190612cd7565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611369576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136090612d69565b60405180910390fd5b611374838383611c15565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156113fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113f190612dfb565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516114e89190611eae565b60405180910390a36114fb848484611c2d565b50505050565b611509610fe4565b73ffffffffffffffffffffffffffffffffffffffff166115276109f5565b73ffffffffffffffffffffffffffffffffffffffff161461157d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157490612e67565b60405180910390fd5b565b611587611c32565b6000600560006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6115cb610fe4565b6040516115d8919061212e565b60405180910390a1565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611651576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161164890612ef9565b60405180910390fd5b61165d82600083611c15565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156116e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116da90612f8b565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516117969190611eae565b60405180910390a36117aa83600084611c2d565b505050565b6000600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61187d6111b5565b6001600560006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586118c1610fe4565b6040516118ce919061212e565b60405180910390a1565b600081836118e69190612fab565b905092915050565b600081836118fc919061301c565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611973576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161196a90613099565b60405180910390fd5b61197f60008383611c15565b80600260008282546119919190612547565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611a429190611eae565b60405180910390a3611a5660008383611c2d565b5050565b60008085858585604051602001611a749493929190613152565b604051602081830303815290604052805190602001209150600060081b6007600084815260200190815260200160002060000160009054906101000a900460081b60ff191614611af9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611af0906131ff565b60405180910390fd5b611b0e611c2042611c7b90919063ffffffff16565b90506000611b1e86868685611c91565b905060405180608001604052808260ff191681526020018873ffffffffffffffffffffffffffffffffffffffff168152602001838152602001878152506007600085815260200190815260200160002060008201518160000160006101000a8154817effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff021916908360081c021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020155606082015181600301559050505094509492505050565b611c1d6111b5565b611c28838383611cca565b505050565b505050565b611c3a6108c2565b611c79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c709061326b565b60405180910390fd5b565b60008183611c899190612547565b905092915050565b600084848484604051602001611caa949392919061328b565b604051602081830303815290604052805190602001209050949350505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611d09578082015181840152602081019050611cee565b60008484015250505050565b6000601f19601f8301169050919050565b6000611d3182611ccf565b611d3b8185611cda565b9350611d4b818560208601611ceb565b611d5481611d15565b840191505092915050565b60006020820190508181036000830152611d798184611d26565b905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611dc082611d95565b9050919050565b611dd081611db5565b8114611ddb57600080fd5b50565b600081359050611ded81611dc7565b92915050565b6000819050919050565b611e0681611df3565b8114611e1157600080fd5b50565b600081359050611e2381611dfd565b92915050565b60008060408385031215611e4057611e3f611d8b565b5b6000611e4e85828601611dde565b9250506020611e5f85828601611e14565b9150509250929050565b60008115159050919050565b611e7e81611e69565b82525050565b6000602082019050611e996000830184611e75565b92915050565b611ea881611df3565b82525050565b6000602082019050611ec36000830184611e9f565b92915050565b6000819050919050565b611edc81611ec9565b8114611ee757600080fd5b50565b600081359050611ef981611ed3565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611f2457611f23611eff565b5b8235905067ffffffffffffffff811115611f4157611f40611f04565b5b602083019150836001820283011115611f5d57611f5c611f09565b5b9250929050565b600080600060408486031215611f7d57611f7c611d8b565b5b6000611f8b86828701611eea565b935050602084013567ffffffffffffffff811115611fac57611fab611d90565b5b611fb886828701611f0e565b92509250509250925092565b600080600060608486031215611fdd57611fdc611d8b565b5b6000611feb86828701611dde565b9350506020611ffc86828701611dde565b925050604061200d86828701611e14565b9150509250925092565b600060ff82169050919050565b61202d81612017565b82525050565b60006020820190506120486000830184612024565b92915050565b60006020828403121561206457612063611d8b565b5b600061207284828501611e14565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60006120a28261207b565b6120ac8185612086565b93506120bc818560208601611ceb565b6120c581611d15565b840191505092915050565b600060208201905081810360008301526120ea8184612097565b905092915050565b60006020828403121561210857612107611d8b565b5b600061211684828501611dde565b91505092915050565b61212881611db5565b82525050565b6000602082019050612143600083018461211f565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61218682611d15565b810181811067ffffffffffffffff821117156121a5576121a461214e565b5b80604052505050565b60006121b8611d81565b90506121c4828261217d565b919050565b600067ffffffffffffffff8211156121e4576121e361214e565b5b6121ed82611d15565b9050602081019050919050565b82818337600083830152505050565b600061221c612217846121c9565b6121ae565b90508281526020810184848401111561223857612237612149565b5b6122438482856121fa565b509392505050565b600082601f8301126122605761225f611eff565b5b8135612270848260208601612209565b91505092915050565b60006020828403121561228f5761228e611d8b565b5b600082013567ffffffffffffffff8111156122ad576122ac611d90565b5b6122b98482850161224b565b91505092915050565b6000602082840312156122d8576122d7611d8b565b5b60006122e684828501611eea565b91505092915050565b60008060006040848603121561230857612307611d8b565b5b600061231686828701611e14565b935050602084013567ffffffffffffffff81111561233757612336611d90565b5b61234386828701611f0e565b92509250509250925092565b6000806040838503121561236657612365611d8b565b5b600061237485828601611dde565b925050602061238585828601611dde565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806123d657607f821691505b6020821081036123e9576123e861238f565b5b50919050565b7f4d757374206861766520612076616c6964207265717565737449640000000000600082015250565b6000612425601b83611cda565b9150612430826123ef565b602082019050919050565b6000602082019050818103600083015261245481612418565b9050919050565b7f52657175657374657220646f6573206e6f74206d617463680000000000000000600082015250565b6000612491601883611cda565b915061249c8261245b565b602082019050919050565b600060208201905081810360008301526124c081612484565b9050919050565b60006124d38385612086565b93506124e08385846121fa565b6124e983611d15565b840190509392505050565b6000602082019050818103600083015261250f8184866124c7565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061255282611df3565b915061255d83611df3565b925082820190508082111561257557612574612518565b5b92915050565b600061258682611df3565b915061259183611df3565b92508282039050818111156125a9576125a8612518565b5b92915050565b7f596f752063616e6e6f74206d696e74206469726563746c790000000000000000600082015250565b60006125e5601883611cda565b91506125f0826125af565b602082019050919050565b60006020820190508181036000830152612614816125d8565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000612677602583611cda565b91506126828261261b565b604082019050919050565b600060208201905081810360008301526126a68161266a565b9050919050565b7f5265717565737420697320657870697265640000000000000000000000000000600082015250565b60006126e3601283611cda565b91506126ee826126ad565b602082019050919050565b60006020820190508181036000830152612712816126d6565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261277b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261273e565b612785868361273e565b95508019841693508086168417925050509392505050565b6000819050919050565b60006127c26127bd6127b884611df3565b61279d565b611df3565b9050919050565b6000819050919050565b6127dc836127a7565b6127f06127e8826127c9565b84845461274b565b825550505050565b600090565b6128056127f8565b6128108184846127d3565b505050565b5b81811015612834576128296000826127fd565b600181019050612816565b5050565b601f8211156128795761284a81612719565b6128538461272e565b81016020851015612862578190505b61287661286e8561272e565b830182612815565b50505b505050565b600082821c905092915050565b600061289c6000198460080261287e565b1980831691505092915050565b60006128b5838361288b565b9150826002028217905092915050565b6128ce8261207b565b67ffffffffffffffff8111156128e7576128e661214e565b5b6128f182546123be565b6128fc828285612838565b600060209050601f83116001811461292f576000841561291d578287015190505b61292785826128a9565b86555061298f565b601f19841661293d86612719565b60005b8281101561296557848901518255600182019150602085019450602081019050612940565b86831015612982578489015161297e601f89168261288b565b8355505b6001600288020188555050505b505050505050565b60006060820190506129ac6000830187611e9f565b6129b96020830186611e9f565b81810360408301526129cc8184866124c7565b905095945050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612a33602683611cda565b9150612a3e826129d7565b604082019050919050565b60006020820190508181036000830152612a6281612a26565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000612ac5602483611cda565b9150612ad082612a69565b604082019050919050565b60006020820190508181036000830152612af481612ab8565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000612b57602283611cda565b9150612b6282612afb565b604082019050919050565b60006020820190508181036000830152612b8681612b4a565b9050919050565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b6000612bc3601083611cda565b9150612bce82612b8d565b602082019050919050565b60006020820190508181036000830152612bf281612bb6565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000612c2f601d83611cda565b9150612c3a82612bf9565b602082019050919050565b60006020820190508181036000830152612c5e81612c22565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000612cc1602583611cda565b9150612ccc82612c65565b604082019050919050565b60006020820190508181036000830152612cf081612cb4565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000612d53602383611cda565b9150612d5e82612cf7565b604082019050919050565b60006020820190508181036000830152612d8281612d46565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000612de5602683611cda565b9150612df082612d89565b604082019050919050565b60006020820190508181036000830152612e1481612dd8565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612e51602083611cda565b9150612e5c82612e1b565b602082019050919050565b60006020820190508181036000830152612e8081612e44565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000612ee3602183611cda565b9150612eee82612e87565b604082019050919050565b60006020820190508181036000830152612f1281612ed6565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000612f75602283611cda565b9150612f8082612f19565b604082019050919050565b60006020820190508181036000830152612fa481612f68565b9050919050565b6000612fb682611df3565b9150612fc183611df3565b9250828202612fcf81611df3565b91508282048414831517612fe657612fe5612518565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061302782611df3565b915061303283611df3565b92508261304257613041612fed565b5b828204905092915050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000613083601f83611cda565b915061308e8261304d565b602082019050919050565b600060208201905081810360008301526130b281613076565b9050919050565b60008160601b9050919050565b60006130d1826130b9565b9050919050565b60006130e3826130c6565b9050919050565b6130fb6130f682611db5565b6130d8565b82525050565b6000819050919050565b61311c61311782611df3565b613101565b82525050565b600081905092915050565b60006131398385613122565b93506131468385846121fa565b82840190509392505050565b600061315e82876130ea565b60148201915061316e828661310b565b60208201915061317f82848661312d565b915081905095945050505050565b7f52657175657374206170706561727320746f2062652061206475706c6963617460008201527f6500000000000000000000000000000000000000000000000000000000000000602082015250565b60006131e9602183611cda565b91506131f48261318d565b604082019050919050565b60006020820190508181036000830152613218816131dc565b9050919050565b7f5061757361626c653a206e6f7420706175736564000000000000000000000000600082015250565b6000613255601483611cda565b91506132608261321f565b602082019050919050565b6000602082019050818103600083015261328481613248565b9050919050565b6000613297828761310b565b6020820191506132a882858761312d565b91506132b4828461310b565b6020820191508190509594505050505056fea26469706673582212207126450d60b0357e4501223560873a904b4004e5fee1e84467d96e2f88c4d25564736f6c63430008110033",
}

// ProvableGBPABI is the input ABI used to generate the binding from.
// Deprecated: Use ProvableGBPMetaData.ABI instead.
var ProvableGBPABI = ProvableGBPMetaData.ABI

// ProvableGBPBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ProvableGBPMetaData.Bin instead.
var ProvableGBPBin = ProvableGBPMetaData.Bin

// DeployProvableGBP deploys a new Ethereum contract, binding an instance of ProvableGBP to it.
func DeployProvableGBP(auth *bind.TransactOpts, backend bind.ContractBackend, _publicKey []byte) (common.Address, *types.Transaction, *ProvableGBP, error) {
	parsed, err := ProvableGBPMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ProvableGBPBin), backend, _publicKey)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ProvableGBP{ProvableGBPCaller: ProvableGBPCaller{contract: contract}, ProvableGBPTransactor: ProvableGBPTransactor{contract: contract}, ProvableGBPFilterer: ProvableGBPFilterer{contract: contract}}, nil
}

// ProvableGBP is an auto generated Go binding around an Ethereum contract.
type ProvableGBP struct {
	ProvableGBPCaller     // Read-only binding to the contract
	ProvableGBPTransactor // Write-only binding to the contract
	ProvableGBPFilterer   // Log filterer for contract events
}

// ProvableGBPCaller is an auto generated read-only Go binding around an Ethereum contract.
type ProvableGBPCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProvableGBPTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ProvableGBPTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProvableGBPFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ProvableGBPFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ProvableGBPSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ProvableGBPSession struct {
	Contract     *ProvableGBP      // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ProvableGBPCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ProvableGBPCallerSession struct {
	Contract *ProvableGBPCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts      // Call options to use throughout this session
}

// ProvableGBPTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ProvableGBPTransactorSession struct {
	Contract     *ProvableGBPTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts      // Transaction auth options to use throughout this session
}

// ProvableGBPRaw is an auto generated low-level Go binding around an Ethereum contract.
type ProvableGBPRaw struct {
	Contract *ProvableGBP // Generic contract binding to access the raw methods on
}

// ProvableGBPCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ProvableGBPCallerRaw struct {
	Contract *ProvableGBPCaller // Generic read-only contract binding to access the raw methods on
}

// ProvableGBPTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ProvableGBPTransactorRaw struct {
	Contract *ProvableGBPTransactor // Generic write-only contract binding to access the raw methods on
}

// NewProvableGBP creates a new instance of ProvableGBP, bound to a specific deployed contract.
func NewProvableGBP(address common.Address, backend bind.ContractBackend) (*ProvableGBP, error) {
	contract, err := bindProvableGBP(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ProvableGBP{ProvableGBPCaller: ProvableGBPCaller{contract: contract}, ProvableGBPTransactor: ProvableGBPTransactor{contract: contract}, ProvableGBPFilterer: ProvableGBPFilterer{contract: contract}}, nil
}

// NewProvableGBPCaller creates a new read-only instance of ProvableGBP, bound to a specific deployed contract.
func NewProvableGBPCaller(address common.Address, caller bind.ContractCaller) (*ProvableGBPCaller, error) {
	contract, err := bindProvableGBP(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ProvableGBPCaller{contract: contract}, nil
}

// NewProvableGBPTransactor creates a new write-only instance of ProvableGBP, bound to a specific deployed contract.
func NewProvableGBPTransactor(address common.Address, transactor bind.ContractTransactor) (*ProvableGBPTransactor, error) {
	contract, err := bindProvableGBP(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ProvableGBPTransactor{contract: contract}, nil
}

// NewProvableGBPFilterer creates a new log filterer instance of ProvableGBP, bound to a specific deployed contract.
func NewProvableGBPFilterer(address common.Address, filterer bind.ContractFilterer) (*ProvableGBPFilterer, error) {
	contract, err := bindProvableGBP(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ProvableGBPFilterer{contract: contract}, nil
}

// bindProvableGBP binds a generic wrapper to an already deployed contract.
func bindProvableGBP(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ProvableGBPABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ProvableGBP *ProvableGBPRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ProvableGBP.Contract.ProvableGBPCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ProvableGBP *ProvableGBPRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ProvableGBP.Contract.ProvableGBPTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ProvableGBP *ProvableGBPRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ProvableGBP.Contract.ProvableGBPTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ProvableGBP *ProvableGBPCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ProvableGBP.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ProvableGBP *ProvableGBPTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ProvableGBP.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ProvableGBP *ProvableGBPTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ProvableGBP.Contract.contract.Transact(opts, method, params...)
}

// ActualMintedPercentage is a free data retrieval call binding the contract method 0x3addb12c.
//
// Solidity: function actualMintedPercentage() view returns(uint256)
func (_ProvableGBP *ProvableGBPCaller) ActualMintedPercentage(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ProvableGBP.contract.Call(opts, &out, "actualMintedPercentage")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ActualMintedPercentage is a free data retrieval call binding the contract method 0x3addb12c.
//
// Solidity: function actualMintedPercentage() view returns(uint256)
func (_ProvableGBP *ProvableGBPSession) ActualMintedPercentage() (*big.Int, error) {
	return _ProvableGBP.Contract.ActualMintedPercentage(&_ProvableGBP.CallOpts)
}

// ActualMintedPercentage is a free data retrieval call binding the contract method 0x3addb12c.
//
// Solidity: function actualMintedPercentage() view returns(uint256)
func (_ProvableGBP *ProvableGBPCallerSession) ActualMintedPercentage() (*big.Int, error) {
	return _ProvableGBP.Contract.ActualMintedPercentage(&_ProvableGBP.CallOpts)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ProvableGBP *ProvableGBPCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ProvableGBP.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ProvableGBP *ProvableGBPSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _ProvableGBP.Contract.Allowance(&_ProvableGBP.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_ProvableGBP *ProvableGBPCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _ProvableGBP.Contract.Allowance(&_ProvableGBP.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ProvableGBP *ProvableGBPCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ProvableGBP.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ProvableGBP *ProvableGBPSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _ProvableGBP.Contract.BalanceOf(&_ProvableGBP.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_ProvableGBP *ProvableGBPCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _ProvableGBP.Contract.BalanceOf(&_ProvableGBP.CallOpts, account)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_ProvableGBP *ProvableGBPCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _ProvableGBP.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_ProvableGBP *ProvableGBPSession) Decimals() (uint8, error) {
	return _ProvableGBP.Contract.Decimals(&_ProvableGBP.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_ProvableGBP *ProvableGBPCallerSession) Decimals() (uint8, error) {
	return _ProvableGBP.Contract.Decimals(&_ProvableGBP.CallOpts)
}

// GetExpiryTime is a free data retrieval call binding the contract method 0x25cb5bc0.
//
// Solidity: function getExpiryTime() view returns(uint256)
func (_ProvableGBP *ProvableGBPCaller) GetExpiryTime(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ProvableGBP.contract.Call(opts, &out, "getExpiryTime")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetExpiryTime is a free data retrieval call binding the contract method 0x25cb5bc0.
//
// Solidity: function getExpiryTime() view returns(uint256)
func (_ProvableGBP *ProvableGBPSession) GetExpiryTime() (*big.Int, error) {
	return _ProvableGBP.Contract.GetExpiryTime(&_ProvableGBP.CallOpts)
}

// GetExpiryTime is a free data retrieval call binding the contract method 0x25cb5bc0.
//
// Solidity: function getExpiryTime() view returns(uint256)
func (_ProvableGBP *ProvableGBPCallerSession) GetExpiryTime() (*big.Int, error) {
	return _ProvableGBP.Contract.GetExpiryTime(&_ProvableGBP.CallOpts)
}

// Mint is a free data retrieval call binding the contract method 0x40c10f19.
//
// Solidity: function mint(address , uint256 ) view returns()
func (_ProvableGBP *ProvableGBPCaller) Mint(opts *bind.CallOpts, arg0 common.Address, arg1 *big.Int) error {
	var out []interface{}
	err := _ProvableGBP.contract.Call(opts, &out, "mint", arg0, arg1)

	if err != nil {
		return err
	}

	return err

}

// Mint is a free data retrieval call binding the contract method 0x40c10f19.
//
// Solidity: function mint(address , uint256 ) view returns()
func (_ProvableGBP *ProvableGBPSession) Mint(arg0 common.Address, arg1 *big.Int) error {
	return _ProvableGBP.Contract.Mint(&_ProvableGBP.CallOpts, arg0, arg1)
}

// Mint is a free data retrieval call binding the contract method 0x40c10f19.
//
// Solidity: function mint(address , uint256 ) view returns()
func (_ProvableGBP *ProvableGBPCallerSession) Mint(arg0 common.Address, arg1 *big.Int) error {
	return _ProvableGBP.Contract.Mint(&_ProvableGBP.CallOpts, arg0, arg1)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ProvableGBP *ProvableGBPCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ProvableGBP.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ProvableGBP *ProvableGBPSession) Name() (string, error) {
	return _ProvableGBP.Contract.Name(&_ProvableGBP.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_ProvableGBP *ProvableGBPCallerSession) Name() (string, error) {
	return _ProvableGBP.Contract.Name(&_ProvableGBP.CallOpts)
}

// OneHundredPercent is a free data retrieval call binding the contract method 0x34913f28.
//
// Solidity: function oneHundredPercent() view returns(uint256)
func (_ProvableGBP *ProvableGBPCaller) OneHundredPercent(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ProvableGBP.contract.Call(opts, &out, "oneHundredPercent")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// OneHundredPercent is a free data retrieval call binding the contract method 0x34913f28.
//
// Solidity: function oneHundredPercent() view returns(uint256)
func (_ProvableGBP *ProvableGBPSession) OneHundredPercent() (*big.Int, error) {
	return _ProvableGBP.Contract.OneHundredPercent(&_ProvableGBP.CallOpts)
}

// OneHundredPercent is a free data retrieval call binding the contract method 0x34913f28.
//
// Solidity: function oneHundredPercent() view returns(uint256)
func (_ProvableGBP *ProvableGBPCallerSession) OneHundredPercent() (*big.Int, error) {
	return _ProvableGBP.Contract.OneHundredPercent(&_ProvableGBP.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ProvableGBP *ProvableGBPCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ProvableGBP.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ProvableGBP *ProvableGBPSession) Owner() (common.Address, error) {
	return _ProvableGBP.Contract.Owner(&_ProvableGBP.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ProvableGBP *ProvableGBPCallerSession) Owner() (common.Address, error) {
	return _ProvableGBP.Contract.Owner(&_ProvableGBP.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_ProvableGBP *ProvableGBPCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _ProvableGBP.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_ProvableGBP *ProvableGBPSession) Paused() (bool, error) {
	return _ProvableGBP.Contract.Paused(&_ProvableGBP.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_ProvableGBP *ProvableGBPCallerSession) Paused() (bool, error) {
	return _ProvableGBP.Contract.Paused(&_ProvableGBP.CallOpts)
}

// PublicKey is a free data retrieval call binding the contract method 0x63ffab31.
//
// Solidity: function publicKey() view returns(bytes)
func (_ProvableGBP *ProvableGBPCaller) PublicKey(opts *bind.CallOpts) ([]byte, error) {
	var out []interface{}
	err := _ProvableGBP.contract.Call(opts, &out, "publicKey")

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// PublicKey is a free data retrieval call binding the contract method 0x63ffab31.
//
// Solidity: function publicKey() view returns(bytes)
func (_ProvableGBP *ProvableGBPSession) PublicKey() ([]byte, error) {
	return _ProvableGBP.Contract.PublicKey(&_ProvableGBP.CallOpts)
}

// PublicKey is a free data retrieval call binding the contract method 0x63ffab31.
//
// Solidity: function publicKey() view returns(bytes)
func (_ProvableGBP *ProvableGBPCallerSession) PublicKey() ([]byte, error) {
	return _ProvableGBP.Contract.PublicKey(&_ProvableGBP.CallOpts)
}

// SeignorageFee is a free data retrieval call binding the contract method 0x1285cc2a.
//
// Solidity: function seignorageFee() view returns(uint256)
func (_ProvableGBP *ProvableGBPCaller) SeignorageFee(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ProvableGBP.contract.Call(opts, &out, "seignorageFee")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SeignorageFee is a free data retrieval call binding the contract method 0x1285cc2a.
//
// Solidity: function seignorageFee() view returns(uint256)
func (_ProvableGBP *ProvableGBPSession) SeignorageFee() (*big.Int, error) {
	return _ProvableGBP.Contract.SeignorageFee(&_ProvableGBP.CallOpts)
}

// SeignorageFee is a free data retrieval call binding the contract method 0x1285cc2a.
//
// Solidity: function seignorageFee() view returns(uint256)
func (_ProvableGBP *ProvableGBPCallerSession) SeignorageFee() (*big.Int, error) {
	return _ProvableGBP.Contract.SeignorageFee(&_ProvableGBP.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ProvableGBP *ProvableGBPCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _ProvableGBP.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ProvableGBP *ProvableGBPSession) Symbol() (string, error) {
	return _ProvableGBP.Contract.Symbol(&_ProvableGBP.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_ProvableGBP *ProvableGBPCallerSession) Symbol() (string, error) {
	return _ProvableGBP.Contract.Symbol(&_ProvableGBP.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ProvableGBP *ProvableGBPCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ProvableGBP.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ProvableGBP *ProvableGBPSession) TotalSupply() (*big.Int, error) {
	return _ProvableGBP.Contract.TotalSupply(&_ProvableGBP.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_ProvableGBP *ProvableGBPCallerSession) TotalSupply() (*big.Int, error) {
	return _ProvableGBP.Contract.TotalSupply(&_ProvableGBP.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ProvableGBP *ProvableGBPTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ProvableGBP.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ProvableGBP *ProvableGBPSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ProvableGBP.Contract.Approve(&_ProvableGBP.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_ProvableGBP *ProvableGBPTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ProvableGBP.Contract.Approve(&_ProvableGBP.TransactOpts, spender, amount)
}

// AuthGranted is a paid mutator transaction binding the contract method 0x21a7e7e9.
//
// Solidity: function authGranted(bytes32 requestId, bytes encryptedData) returns()
func (_ProvableGBP *ProvableGBPTransactor) AuthGranted(opts *bind.TransactOpts, requestId [32]byte, encryptedData []byte) (*types.Transaction, error) {
	return _ProvableGBP.contract.Transact(opts, "authGranted", requestId, encryptedData)
}

// AuthGranted is a paid mutator transaction binding the contract method 0x21a7e7e9.
//
// Solidity: function authGranted(bytes32 requestId, bytes encryptedData) returns()
func (_ProvableGBP *ProvableGBPSession) AuthGranted(requestId [32]byte, encryptedData []byte) (*types.Transaction, error) {
	return _ProvableGBP.Contract.AuthGranted(&_ProvableGBP.TransactOpts, requestId, encryptedData)
}

// AuthGranted is a paid mutator transaction binding the contract method 0x21a7e7e9.
//
// Solidity: function authGranted(bytes32 requestId, bytes encryptedData) returns()
func (_ProvableGBP *ProvableGBPTransactorSession) AuthGranted(requestId [32]byte, encryptedData []byte) (*types.Transaction, error) {
	return _ProvableGBP.Contract.AuthGranted(&_ProvableGBP.TransactOpts, requestId, encryptedData)
}

// AuthRequest is a paid mutator transaction binding the contract method 0xa4629533.
//
// Solidity: function authRequest(bytes32 requestId, bytes serverEncryptedData) returns()
func (_ProvableGBP *ProvableGBPTransactor) AuthRequest(opts *bind.TransactOpts, requestId [32]byte, serverEncryptedData []byte) (*types.Transaction, error) {
	return _ProvableGBP.contract.Transact(opts, "authRequest", requestId, serverEncryptedData)
}

// AuthRequest is a paid mutator transaction binding the contract method 0xa4629533.
//
// Solidity: function authRequest(bytes32 requestId, bytes serverEncryptedData) returns()
func (_ProvableGBP *ProvableGBPSession) AuthRequest(requestId [32]byte, serverEncryptedData []byte) (*types.Transaction, error) {
	return _ProvableGBP.Contract.AuthRequest(&_ProvableGBP.TransactOpts, requestId, serverEncryptedData)
}

// AuthRequest is a paid mutator transaction binding the contract method 0xa4629533.
//
// Solidity: function authRequest(bytes32 requestId, bytes serverEncryptedData) returns()
func (_ProvableGBP *ProvableGBPTransactorSession) AuthRequest(requestId [32]byte, serverEncryptedData []byte) (*types.Transaction, error) {
	return _ProvableGBP.Contract.AuthRequest(&_ProvableGBP.TransactOpts, requestId, serverEncryptedData)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_ProvableGBP *ProvableGBPTransactor) Burn(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _ProvableGBP.contract.Transact(opts, "burn", amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_ProvableGBP *ProvableGBPSession) Burn(amount *big.Int) (*types.Transaction, error) {
	return _ProvableGBP.Contract.Burn(&_ProvableGBP.TransactOpts, amount)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 amount) returns()
func (_ProvableGBP *ProvableGBPTransactorSession) Burn(amount *big.Int) (*types.Transaction, error) {
	return _ProvableGBP.Contract.Burn(&_ProvableGBP.TransactOpts, amount)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 amount) returns()
func (_ProvableGBP *ProvableGBPTransactor) BurnFrom(opts *bind.TransactOpts, account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ProvableGBP.contract.Transact(opts, "burnFrom", account, amount)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 amount) returns()
func (_ProvableGBP *ProvableGBPSession) BurnFrom(account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ProvableGBP.Contract.BurnFrom(&_ProvableGBP.TransactOpts, account, amount)
}

// BurnFrom is a paid mutator transaction binding the contract method 0x79cc6790.
//
// Solidity: function burnFrom(address account, uint256 amount) returns()
func (_ProvableGBP *ProvableGBPTransactorSession) BurnFrom(account common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ProvableGBP.Contract.BurnFrom(&_ProvableGBP.TransactOpts, account, amount)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ProvableGBP *ProvableGBPTransactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ProvableGBP.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ProvableGBP *ProvableGBPSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ProvableGBP.Contract.DecreaseAllowance(&_ProvableGBP.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_ProvableGBP *ProvableGBPTransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _ProvableGBP.Contract.DecreaseAllowance(&_ProvableGBP.TransactOpts, spender, subtractedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ProvableGBP *ProvableGBPTransactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ProvableGBP.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ProvableGBP *ProvableGBPSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ProvableGBP.Contract.IncreaseAllowance(&_ProvableGBP.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_ProvableGBP *ProvableGBPTransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _ProvableGBP.Contract.IncreaseAllowance(&_ProvableGBP.TransactOpts, spender, addedValue)
}

// MintRequest is a paid mutator transaction binding the contract method 0xcdc1f6d4.
//
// Solidity: function mintRequest(uint256 amount, bytes encryptedData) returns()
func (_ProvableGBP *ProvableGBPTransactor) MintRequest(opts *bind.TransactOpts, amount *big.Int, encryptedData []byte) (*types.Transaction, error) {
	return _ProvableGBP.contract.Transact(opts, "mintRequest", amount, encryptedData)
}

// MintRequest is a paid mutator transaction binding the contract method 0xcdc1f6d4.
//
// Solidity: function mintRequest(uint256 amount, bytes encryptedData) returns()
func (_ProvableGBP *ProvableGBPSession) MintRequest(amount *big.Int, encryptedData []byte) (*types.Transaction, error) {
	return _ProvableGBP.Contract.MintRequest(&_ProvableGBP.TransactOpts, amount, encryptedData)
}

// MintRequest is a paid mutator transaction binding the contract method 0xcdc1f6d4.
//
// Solidity: function mintRequest(uint256 amount, bytes encryptedData) returns()
func (_ProvableGBP *ProvableGBPTransactorSession) MintRequest(amount *big.Int, encryptedData []byte) (*types.Transaction, error) {
	return _ProvableGBP.Contract.MintRequest(&_ProvableGBP.TransactOpts, amount, encryptedData)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_ProvableGBP *ProvableGBPTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ProvableGBP.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_ProvableGBP *ProvableGBPSession) Pause() (*types.Transaction, error) {
	return _ProvableGBP.Contract.Pause(&_ProvableGBP.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_ProvableGBP *ProvableGBPTransactorSession) Pause() (*types.Transaction, error) {
	return _ProvableGBP.Contract.Pause(&_ProvableGBP.TransactOpts)
}

// PaymentComplete is a paid mutator transaction binding the contract method 0xac5b756d.
//
// Solidity: function paymentComplete(bytes32 requestId) returns()
func (_ProvableGBP *ProvableGBPTransactor) PaymentComplete(opts *bind.TransactOpts, requestId [32]byte) (*types.Transaction, error) {
	return _ProvableGBP.contract.Transact(opts, "paymentComplete", requestId)
}

// PaymentComplete is a paid mutator transaction binding the contract method 0xac5b756d.
//
// Solidity: function paymentComplete(bytes32 requestId) returns()
func (_ProvableGBP *ProvableGBPSession) PaymentComplete(requestId [32]byte) (*types.Transaction, error) {
	return _ProvableGBP.Contract.PaymentComplete(&_ProvableGBP.TransactOpts, requestId)
}

// PaymentComplete is a paid mutator transaction binding the contract method 0xac5b756d.
//
// Solidity: function paymentComplete(bytes32 requestId) returns()
func (_ProvableGBP *ProvableGBPTransactorSession) PaymentComplete(requestId [32]byte) (*types.Transaction, error) {
	return _ProvableGBP.Contract.PaymentComplete(&_ProvableGBP.TransactOpts, requestId)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ProvableGBP *ProvableGBPTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ProvableGBP.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ProvableGBP *ProvableGBPSession) RenounceOwnership() (*types.Transaction, error) {
	return _ProvableGBP.Contract.RenounceOwnership(&_ProvableGBP.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ProvableGBP *ProvableGBPTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ProvableGBP.Contract.RenounceOwnership(&_ProvableGBP.TransactOpts)
}

// SetPublicKey is a paid mutator transaction binding the contract method 0xa91d58b4.
//
// Solidity: function setPublicKey(bytes _publicKey) returns()
func (_ProvableGBP *ProvableGBPTransactor) SetPublicKey(opts *bind.TransactOpts, _publicKey []byte) (*types.Transaction, error) {
	return _ProvableGBP.contract.Transact(opts, "setPublicKey", _publicKey)
}

// SetPublicKey is a paid mutator transaction binding the contract method 0xa91d58b4.
//
// Solidity: function setPublicKey(bytes _publicKey) returns()
func (_ProvableGBP *ProvableGBPSession) SetPublicKey(_publicKey []byte) (*types.Transaction, error) {
	return _ProvableGBP.Contract.SetPublicKey(&_ProvableGBP.TransactOpts, _publicKey)
}

// SetPublicKey is a paid mutator transaction binding the contract method 0xa91d58b4.
//
// Solidity: function setPublicKey(bytes _publicKey) returns()
func (_ProvableGBP *ProvableGBPTransactorSession) SetPublicKey(_publicKey []byte) (*types.Transaction, error) {
	return _ProvableGBP.Contract.SetPublicKey(&_ProvableGBP.TransactOpts, _publicKey)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_ProvableGBP *ProvableGBPTransactor) Transfer(opts *bind.TransactOpts, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ProvableGBP.contract.Transact(opts, "transfer", to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_ProvableGBP *ProvableGBPSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ProvableGBP.Contract.Transfer(&_ProvableGBP.TransactOpts, to, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address to, uint256 amount) returns(bool)
func (_ProvableGBP *ProvableGBPTransactorSession) Transfer(to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ProvableGBP.Contract.Transfer(&_ProvableGBP.TransactOpts, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_ProvableGBP *ProvableGBPTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ProvableGBP.contract.Transact(opts, "transferFrom", from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_ProvableGBP *ProvableGBPSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ProvableGBP.Contract.TransferFrom(&_ProvableGBP.TransactOpts, from, to, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 amount) returns(bool)
func (_ProvableGBP *ProvableGBPTransactorSession) TransferFrom(from common.Address, to common.Address, amount *big.Int) (*types.Transaction, error) {
	return _ProvableGBP.Contract.TransferFrom(&_ProvableGBP.TransactOpts, from, to, amount)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ProvableGBP *ProvableGBPTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ProvableGBP.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ProvableGBP *ProvableGBPSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ProvableGBP.Contract.TransferOwnership(&_ProvableGBP.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ProvableGBP *ProvableGBPTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ProvableGBP.Contract.TransferOwnership(&_ProvableGBP.TransactOpts, newOwner)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_ProvableGBP *ProvableGBPTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ProvableGBP.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_ProvableGBP *ProvableGBPSession) Unpause() (*types.Transaction, error) {
	return _ProvableGBP.Contract.Unpause(&_ProvableGBP.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_ProvableGBP *ProvableGBPTransactorSession) Unpause() (*types.Transaction, error) {
	return _ProvableGBP.Contract.Unpause(&_ProvableGBP.TransactOpts)
}

// ProvableGBPApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the ProvableGBP contract.
type ProvableGBPApprovalIterator struct {
	Event *ProvableGBPApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProvableGBPApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProvableGBPApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProvableGBPApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProvableGBPApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProvableGBPApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProvableGBPApproval represents a Approval event raised by the ProvableGBP contract.
type ProvableGBPApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ProvableGBP *ProvableGBPFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*ProvableGBPApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _ProvableGBP.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &ProvableGBPApprovalIterator{contract: _ProvableGBP.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ProvableGBP *ProvableGBPFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ProvableGBPApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _ProvableGBP.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProvableGBPApproval)
				if err := _ProvableGBP.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_ProvableGBP *ProvableGBPFilterer) ParseApproval(log types.Log) (*ProvableGBPApproval, error) {
	event := new(ProvableGBPApproval)
	if err := _ProvableGBP.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProvableGBPAuthGrantedIterator is returned from FilterAuthGranted and is used to iterate over the raw logs and unpacked data for AuthGranted events raised by the ProvableGBP contract.
type ProvableGBPAuthGrantedIterator struct {
	Event *ProvableGBPAuthGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProvableGBPAuthGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProvableGBPAuthGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProvableGBPAuthGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProvableGBPAuthGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProvableGBPAuthGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProvableGBPAuthGranted represents a AuthGranted event raised by the ProvableGBP contract.
type ProvableGBPAuthGranted struct {
	Requester          common.Address
	RequestId          [32]byte
	GrantEncryptedData []byte
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterAuthGranted is a free log retrieval operation binding the contract event 0xa3cd7d021dc9794ae8a4520e68440669e45a8758c6feac5a46db4c6953d35d25.
//
// Solidity: event AuthGranted(address indexed requester, bytes32 indexed requestId, bytes grantEncryptedData)
func (_ProvableGBP *ProvableGBPFilterer) FilterAuthGranted(opts *bind.FilterOpts, requester []common.Address, requestId [][32]byte) (*ProvableGBPAuthGrantedIterator, error) {

	var requesterRule []interface{}
	for _, requesterItem := range requester {
		requesterRule = append(requesterRule, requesterItem)
	}
	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _ProvableGBP.contract.FilterLogs(opts, "AuthGranted", requesterRule, requestIdRule)
	if err != nil {
		return nil, err
	}
	return &ProvableGBPAuthGrantedIterator{contract: _ProvableGBP.contract, event: "AuthGranted", logs: logs, sub: sub}, nil
}

// WatchAuthGranted is a free log subscription operation binding the contract event 0xa3cd7d021dc9794ae8a4520e68440669e45a8758c6feac5a46db4c6953d35d25.
//
// Solidity: event AuthGranted(address indexed requester, bytes32 indexed requestId, bytes grantEncryptedData)
func (_ProvableGBP *ProvableGBPFilterer) WatchAuthGranted(opts *bind.WatchOpts, sink chan<- *ProvableGBPAuthGranted, requester []common.Address, requestId [][32]byte) (event.Subscription, error) {

	var requesterRule []interface{}
	for _, requesterItem := range requester {
		requesterRule = append(requesterRule, requesterItem)
	}
	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _ProvableGBP.contract.WatchLogs(opts, "AuthGranted", requesterRule, requestIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProvableGBPAuthGranted)
				if err := _ProvableGBP.contract.UnpackLog(event, "AuthGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAuthGranted is a log parse operation binding the contract event 0xa3cd7d021dc9794ae8a4520e68440669e45a8758c6feac5a46db4c6953d35d25.
//
// Solidity: event AuthGranted(address indexed requester, bytes32 indexed requestId, bytes grantEncryptedData)
func (_ProvableGBP *ProvableGBPFilterer) ParseAuthGranted(log types.Log) (*ProvableGBPAuthGranted, error) {
	event := new(ProvableGBPAuthGranted)
	if err := _ProvableGBP.contract.UnpackLog(event, "AuthGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProvableGBPAuthRequestIterator is returned from FilterAuthRequest and is used to iterate over the raw logs and unpacked data for AuthRequest events raised by the ProvableGBP contract.
type ProvableGBPAuthRequestIterator struct {
	Event *ProvableGBPAuthRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProvableGBPAuthRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProvableGBPAuthRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProvableGBPAuthRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProvableGBPAuthRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProvableGBPAuthRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProvableGBPAuthRequest represents a AuthRequest event raised by the ProvableGBP contract.
type ProvableGBPAuthRequest struct {
	Requester         common.Address
	RequestId         [32]byte
	AuthEncryptedData []byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterAuthRequest is a free log retrieval operation binding the contract event 0x220f931a071dfcd35fda9f25680cb03785508840415a802de6e99230f889862b.
//
// Solidity: event AuthRequest(address indexed requester, bytes32 indexed requestId, bytes authEncryptedData)
func (_ProvableGBP *ProvableGBPFilterer) FilterAuthRequest(opts *bind.FilterOpts, requester []common.Address, requestId [][32]byte) (*ProvableGBPAuthRequestIterator, error) {

	var requesterRule []interface{}
	for _, requesterItem := range requester {
		requesterRule = append(requesterRule, requesterItem)
	}
	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _ProvableGBP.contract.FilterLogs(opts, "AuthRequest", requesterRule, requestIdRule)
	if err != nil {
		return nil, err
	}
	return &ProvableGBPAuthRequestIterator{contract: _ProvableGBP.contract, event: "AuthRequest", logs: logs, sub: sub}, nil
}

// WatchAuthRequest is a free log subscription operation binding the contract event 0x220f931a071dfcd35fda9f25680cb03785508840415a802de6e99230f889862b.
//
// Solidity: event AuthRequest(address indexed requester, bytes32 indexed requestId, bytes authEncryptedData)
func (_ProvableGBP *ProvableGBPFilterer) WatchAuthRequest(opts *bind.WatchOpts, sink chan<- *ProvableGBPAuthRequest, requester []common.Address, requestId [][32]byte) (event.Subscription, error) {

	var requesterRule []interface{}
	for _, requesterItem := range requester {
		requesterRule = append(requesterRule, requesterItem)
	}
	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _ProvableGBP.contract.WatchLogs(opts, "AuthRequest", requesterRule, requestIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProvableGBPAuthRequest)
				if err := _ProvableGBP.contract.UnpackLog(event, "AuthRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAuthRequest is a log parse operation binding the contract event 0x220f931a071dfcd35fda9f25680cb03785508840415a802de6e99230f889862b.
//
// Solidity: event AuthRequest(address indexed requester, bytes32 indexed requestId, bytes authEncryptedData)
func (_ProvableGBP *ProvableGBPFilterer) ParseAuthRequest(log types.Log) (*ProvableGBPAuthRequest, error) {
	event := new(ProvableGBPAuthRequest)
	if err := _ProvableGBP.contract.UnpackLog(event, "AuthRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProvableGBPMintRequestIterator is returned from FilterMintRequest and is used to iterate over the raw logs and unpacked data for MintRequest events raised by the ProvableGBP contract.
type ProvableGBPMintRequestIterator struct {
	Event *ProvableGBPMintRequest // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProvableGBPMintRequestIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProvableGBPMintRequest)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProvableGBPMintRequest)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProvableGBPMintRequestIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProvableGBPMintRequestIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProvableGBPMintRequest represents a MintRequest event raised by the ProvableGBP contract.
type ProvableGBPMintRequest struct {
	Requester     common.Address
	RequestId     [32]byte
	Amount        *big.Int
	Expiration    *big.Int
	EncryptedData []byte
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterMintRequest is a free log retrieval operation binding the contract event 0x45fa4b26a755f4cc5780432570badb0410d1ed0c688479aa9e708761ffb82ec2.
//
// Solidity: event MintRequest(address indexed requester, bytes32 indexed requestId, uint256 amount, uint256 expiration, bytes encryptedData)
func (_ProvableGBP *ProvableGBPFilterer) FilterMintRequest(opts *bind.FilterOpts, requester []common.Address, requestId [][32]byte) (*ProvableGBPMintRequestIterator, error) {

	var requesterRule []interface{}
	for _, requesterItem := range requester {
		requesterRule = append(requesterRule, requesterItem)
	}
	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _ProvableGBP.contract.FilterLogs(opts, "MintRequest", requesterRule, requestIdRule)
	if err != nil {
		return nil, err
	}
	return &ProvableGBPMintRequestIterator{contract: _ProvableGBP.contract, event: "MintRequest", logs: logs, sub: sub}, nil
}

// WatchMintRequest is a free log subscription operation binding the contract event 0x45fa4b26a755f4cc5780432570badb0410d1ed0c688479aa9e708761ffb82ec2.
//
// Solidity: event MintRequest(address indexed requester, bytes32 indexed requestId, uint256 amount, uint256 expiration, bytes encryptedData)
func (_ProvableGBP *ProvableGBPFilterer) WatchMintRequest(opts *bind.WatchOpts, sink chan<- *ProvableGBPMintRequest, requester []common.Address, requestId [][32]byte) (event.Subscription, error) {

	var requesterRule []interface{}
	for _, requesterItem := range requester {
		requesterRule = append(requesterRule, requesterItem)
	}
	var requestIdRule []interface{}
	for _, requestIdItem := range requestId {
		requestIdRule = append(requestIdRule, requestIdItem)
	}

	logs, sub, err := _ProvableGBP.contract.WatchLogs(opts, "MintRequest", requesterRule, requestIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProvableGBPMintRequest)
				if err := _ProvableGBP.contract.UnpackLog(event, "MintRequest", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMintRequest is a log parse operation binding the contract event 0x45fa4b26a755f4cc5780432570badb0410d1ed0c688479aa9e708761ffb82ec2.
//
// Solidity: event MintRequest(address indexed requester, bytes32 indexed requestId, uint256 amount, uint256 expiration, bytes encryptedData)
func (_ProvableGBP *ProvableGBPFilterer) ParseMintRequest(log types.Log) (*ProvableGBPMintRequest, error) {
	event := new(ProvableGBPMintRequest)
	if err := _ProvableGBP.contract.UnpackLog(event, "MintRequest", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProvableGBPOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the ProvableGBP contract.
type ProvableGBPOwnershipTransferredIterator struct {
	Event *ProvableGBPOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProvableGBPOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProvableGBPOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProvableGBPOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProvableGBPOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProvableGBPOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProvableGBPOwnershipTransferred represents a OwnershipTransferred event raised by the ProvableGBP contract.
type ProvableGBPOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ProvableGBP *ProvableGBPFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ProvableGBPOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ProvableGBP.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ProvableGBPOwnershipTransferredIterator{contract: _ProvableGBP.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ProvableGBP *ProvableGBPFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ProvableGBPOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ProvableGBP.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProvableGBPOwnershipTransferred)
				if err := _ProvableGBP.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ProvableGBP *ProvableGBPFilterer) ParseOwnershipTransferred(log types.Log) (*ProvableGBPOwnershipTransferred, error) {
	event := new(ProvableGBPOwnershipTransferred)
	if err := _ProvableGBP.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProvableGBPPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the ProvableGBP contract.
type ProvableGBPPausedIterator struct {
	Event *ProvableGBPPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProvableGBPPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProvableGBPPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProvableGBPPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProvableGBPPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProvableGBPPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProvableGBPPaused represents a Paused event raised by the ProvableGBP contract.
type ProvableGBPPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_ProvableGBP *ProvableGBPFilterer) FilterPaused(opts *bind.FilterOpts) (*ProvableGBPPausedIterator, error) {

	logs, sub, err := _ProvableGBP.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &ProvableGBPPausedIterator{contract: _ProvableGBP.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_ProvableGBP *ProvableGBPFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *ProvableGBPPaused) (event.Subscription, error) {

	logs, sub, err := _ProvableGBP.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProvableGBPPaused)
				if err := _ProvableGBP.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_ProvableGBP *ProvableGBPFilterer) ParsePaused(log types.Log) (*ProvableGBPPaused, error) {
	event := new(ProvableGBPPaused)
	if err := _ProvableGBP.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProvableGBPTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the ProvableGBP contract.
type ProvableGBPTransferIterator struct {
	Event *ProvableGBPTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProvableGBPTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProvableGBPTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProvableGBPTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProvableGBPTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProvableGBPTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProvableGBPTransfer represents a Transfer event raised by the ProvableGBP contract.
type ProvableGBPTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ProvableGBP *ProvableGBPFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ProvableGBPTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ProvableGBP.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ProvableGBPTransferIterator{contract: _ProvableGBP.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ProvableGBP *ProvableGBPFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ProvableGBPTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _ProvableGBP.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProvableGBPTransfer)
				if err := _ProvableGBP.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_ProvableGBP *ProvableGBPFilterer) ParseTransfer(log types.Log) (*ProvableGBPTransfer, error) {
	event := new(ProvableGBPTransfer)
	if err := _ProvableGBP.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ProvableGBPUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the ProvableGBP contract.
type ProvableGBPUnpausedIterator struct {
	Event *ProvableGBPUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ProvableGBPUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ProvableGBPUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ProvableGBPUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ProvableGBPUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ProvableGBPUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ProvableGBPUnpaused represents a Unpaused event raised by the ProvableGBP contract.
type ProvableGBPUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_ProvableGBP *ProvableGBPFilterer) FilterUnpaused(opts *bind.FilterOpts) (*ProvableGBPUnpausedIterator, error) {

	logs, sub, err := _ProvableGBP.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &ProvableGBPUnpausedIterator{contract: _ProvableGBP.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_ProvableGBP *ProvableGBPFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *ProvableGBPUnpaused) (event.Subscription, error) {

	logs, sub, err := _ProvableGBP.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ProvableGBPUnpaused)
				if err := _ProvableGBP.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_ProvableGBP *ProvableGBPFilterer) ParseUnpaused(log types.Log) (*ProvableGBPUnpaused, error) {
	event := new(ProvableGBPUnpaused)
	if err := _ProvableGBP.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
